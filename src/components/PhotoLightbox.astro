---
// A lightbox component for displaying full-size images
---

<div id="photo-lightbox" class="lightbox">
  <div class="lightbox-content">
    <button class="close-button" aria-label="Close lightbox">&times;</button>
    <button class="nav-button prev-button" aria-label="Previous image">&#10094;</button>
    <div class="image-container">
      <img src="" alt="" id="lightbox-image" />
      <div class="image-info">
        <div class="image-title">
          <h3 id="lightbox-title"></h3>
        </div>
        <div class="image-description">
          <p id="lightbox-description"></p>
        </div>
      </div>
      <div class="image-controls">
        <button class="control-button zoom-out" aria-label="Zoom out">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
        </button>
        <button class="control-button zoom-in" aria-label="Zoom in">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            <line x1="11" y1="8" x2="11" y2="14"></line>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
        </button>
        <button class="control-button fullscreen" aria-label="Toggle fullscreen">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path>
          </svg>
        </button>
        <button class="control-button download" aria-label="Download image">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7 10 12 15 17 10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
        </button>
      </div>
    </div>
    <button class="nav-button next-button" aria-label="Next image">&#10095;</button>
  </div>
</div>

<style>
  .lightbox {
    @apply fixed inset-0 z-50 flex items-center justify-center;
    background: rgba(0, 0, 0, 0.92);
    backdrop-filter: blur(5px);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .lightbox.active {
    opacity: 1;
    pointer-events: auto;
  }

  .lightbox-content {
    @apply relative flex items-center justify-center w-full h-full max-w-[90vw] max-h-[90vh];
  }

  .image-container {
    @apply relative flex items-center justify-center h-full;
    max-width: calc(100% - 100px);
    cursor: grab;
  }

  .image-container:active {
    cursor: grabbing;
  }

  #lightbox-image {
    @apply max-w-full max-h-full object-contain;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.3);
    border-radius: 4px;
    transition: transform 0.3s ease;
    transform-origin: center;
  }

  .image-info {
    @apply absolute bottom-0 left-0 right-0 bg-black bg-opacity-80 text-white p-4;
    backdrop-filter: blur(12px);
    transform: translateY(100%);
    transition: transform 0.3s ease;
    border-radius: 8px 8px 0 0;
  }

  .image-container:hover .image-info {
    transform: translateY(0);
  }

  .image-title h3 {
    @apply text-lg font-semibold mb-2 text-center;
    margin: 0;
    line-height: 1.3;
  }

  .image-description p {
    @apply text-sm text-center opacity-90 leading-relaxed;
    margin: 0;
  }

  .image-controls {
    @apply absolute top-4 right-4 flex gap-2;
    transform: translateY(-100%);
    transition: transform 0.3s ease;
  }

  .image-container:hover .image-controls {
    transform: translateY(0);
  }

  .control-button {
    @apply w-10 h-10 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center;
    backdrop-filter: blur(4px);
    transition: all 0.2s ease;
  }

  .control-button:hover {
    @apply bg-opacity-70;
    transform: scale(1.1);
  }

  .control-button svg {
    @apply w-5 h-5;
  }

  .close-button {
    @apply absolute top-4 right-4 text-white text-3xl font-bold z-10 w-10 h-10 flex items-center justify-center rounded-full;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
    transition: all 0.2s ease;
  }

  .close-button:hover {
    @apply bg-white text-black;
    transform: rotate(90deg);
  }

  .nav-button {
    @apply text-white text-3xl font-bold z-10 w-10 h-16 flex items-center justify-center rounded-full;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
    transition: all 0.2s ease;
  }

  .nav-button:hover {
    @apply bg-white text-black;
    transform: scale(1.1);
  }

  .prev-button {
    @apply absolute left-4;
  }

  .next-button {
    @apply absolute right-4;
  }

  /* Animation classes */
  .fade-in {
    animation: fadeIn 0.3s ease forwards;
  }

  .fade-out {
    animation: fadeOut 0.3s ease forwards;
  }

  .zoom-in {
    animation: zoomIn 0.3s ease forwards;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }

  @keyframes zoomIn {
    from { transform: scale(0.9); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }

  /* Mobile responsive styles */
  @media (max-width: 768px) {
    .lightbox-content {
      @apply max-w-[95vw] max-h-[95vh];
    }

    .image-container {
      max-width: calc(100% - 60px);
    }

    .image-info {
      @apply p-3;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      transform: translateY(0);
      border-radius: 0;
    }

    .image-controls {
      @apply top-2 right-2;
      transform: translateY(0);
    }

    .control-button {
      @apply w-8 h-8;
    }

    .control-button svg {
      @apply w-4 h-4;
    }

    .image-title h3 {
      @apply text-base mb-1;
    }

    .image-description p {
      @apply text-xs;
    }

    .close-button {
      @apply top-2 right-2 w-8 h-8 text-2xl;
    }

    .nav-button {
      @apply w-8 h-12 text-2xl;
    }

    .prev-button {
      @apply left-2;
    }

    .next-button {
      @apply right-2;
    }
  }

  @media (max-width: 480px) {
    .image-info {
      @apply p-2;
    }

    .image-title h3 {
      @apply text-sm mb-1;
    }

    .image-description p {
      @apply text-xs;
    }
  }
</style>

<script>
  // Lightbox functionality
  let currentIndex = 0;
  let galleryImages = [];
  let currentScale = 1;
  let isDragging = false;
  let startX = 0;
  let startY = 0;
  let translateX = 0;
  let translateY = 0;

  function setupLightbox() {
    const lightbox = document.getElementById('photo-lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxDescription = document.getElementById('lightbox-description');
    const closeButton = document.querySelector('.close-button');
    const prevButton = document.querySelector('.prev-button');
    const nextButton = document.querySelector('.next-button');
    const zoomInButton = document.querySelector('.zoom-in');
    const zoomOutButton = document.querySelector('.zoom-out');
    const fullscreenButton = document.querySelector('.fullscreen');
    const downloadButton = document.querySelector('.download');

    // Get all gallery images
    const photoItems = document.querySelectorAll('.photo-item');
    galleryImages = Array.from(photoItems).map(item => {
      const img = item.querySelector('img');
      const title = item.dataset.title || item.querySelector('.photo-caption p')?.textContent || '';
      const description = item.dataset.description || '';
      return {
        src: img.src,
        alt: img.alt,
        title: title,
        description: description
      };
    });

    // Add click event to all gallery images
    photoItems.forEach((item, index) => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        openLightbox(index);
      });
    });

    // Close lightbox
    closeButton.addEventListener('click', closeLightbox);
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });

    // Navigation
    prevButton.addEventListener('click', showPrevImage);
    nextButton.addEventListener('click', showNextImage);

    // Zoom controls
    zoomInButton.addEventListener('click', () => zoomImage(1.2));
    zoomOutButton.addEventListener('click', () => zoomImage(0.8));

    // Fullscreen toggle
    fullscreenButton.addEventListener('click', toggleFullscreen);

    // Download image
    downloadButton.addEventListener('click', downloadImage);

    // Mouse wheel zoom
    lightboxImage.addEventListener('wheel', (e) => {
      e.preventDefault();
      const delta = e.deltaY > 0 ? 0.9 : 1.1;
      zoomImage(delta);
    });

    // Touch events for mobile
    let touchStartX = 0;
    let touchStartY = 0;
    let initialPinchDistance = 0;

    lightboxImage.addEventListener('touchstart', (e) => {
      if (e.touches.length === 2) {
        // Pinch to zoom
        initialPinchDistance = Math.hypot(
          e.touches[0].clientX - e.touches[1].clientX,
          e.touches[0].clientY - e.touches[1].clientY
        );
      } else {
        // Single touch for pan
        touchStartX = e.touches[0].clientX - translateX;
        touchStartY = e.touches[0].clientY - translateY;
      }
    });

    lightboxImage.addEventListener('touchmove', (e) => {
      if (e.touches.length === 2) {
        // Pinch to zoom
        const currentDistance = Math.hypot(
          e.touches[0].clientX - e.touches[1].clientX,
          e.touches[0].clientY - e.touches[1].clientY
        );
        const scale = currentDistance / initialPinchDistance;
        zoomImage(scale);
        initialPinchDistance = currentDistance;
      } else if (currentScale > 1) {
        // Pan when zoomed
        e.preventDefault();
        translateX = e.touches[0].clientX - touchStartX;
        translateY = e.touches[0].clientY - touchStartY;
        updateImageTransform();
      }
    });

    // Mouse drag for panning
    lightboxImage.addEventListener('mousedown', (e) => {
      if (currentScale > 1) {
        isDragging = true;
        startX = e.clientX - translateX;
        startY = e.clientY - translateY;
        lightboxImage.style.cursor = 'grabbing';
      }
    });

    document.addEventListener('mousemove', (e) => {
      if (isDragging && currentScale > 1) {
        translateX = e.clientX - startX;
        translateY = e.clientY - startY;
        updateImageTransform();
      }
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
      lightboxImage.style.cursor = 'grab';
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightbox.classList.contains('active')) return;

      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowLeft') showPrevImage();
      if (e.key === 'ArrowRight') showNextImage();
      if (e.key === '+') zoomImage(1.2);
      if (e.key === '-') zoomImage(0.8);
      if (e.key === 'f') toggleFullscreen();
    });
  }

  function openLightbox(index) {
    currentIndex = index;
    const lightbox = document.getElementById('photo-lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxDescription = document.getElementById('lightbox-description');

    // Reset zoom and position
    currentScale = 1;
    translateX = 0;
    translateY = 0;
    updateImageTransform();

    // Set image, title, and description
    lightboxImage.src = galleryImages[index].src;
    lightboxImage.alt = galleryImages[index].alt;
    lightboxTitle.textContent = galleryImages[index].title;
    lightboxDescription.textContent = galleryImages[index].description;

    // Show lightbox with animation
    lightbox.classList.add('active');
    lightboxImage.classList.add('zoom-in');

    // Prevent body scrolling
    document.body.style.overflow = 'hidden';

    // Remove animation class after animation completes
    setTimeout(() => {
      lightboxImage.classList.remove('zoom-in');
    }, 300);
  }

  function closeLightbox() {
    const lightbox = document.getElementById('photo-lightbox');
    const lightboxImage = document.getElementById('lightbox-image');

    // Add fade out animation
    lightboxImage.classList.add('fade-out');

    setTimeout(() => {
      lightbox.classList.remove('active');
      lightboxImage.classList.remove('fade-out');
      // Restore body scrolling
      document.body.style.overflow = '';
    }, 300);
  }

  function showPrevImage() {
    currentIndex = (currentIndex - 1 + galleryImages.length) % galleryImages.length;
    updateLightboxImage();
  }

  function showNextImage() {
    currentIndex = (currentIndex + 1) % galleryImages.length;
    updateLightboxImage();
  }

  function updateLightboxImage() {
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxDescription = document.getElementById('lightbox-description');

    // Reset zoom and position
    currentScale = 1;
    translateX = 0;
    translateY = 0;
    updateImageTransform();

    // Add fade out animation
    lightboxImage.classList.add('fade-out');

    setTimeout(() => {
      // Update image, title, and description
      lightboxImage.src = galleryImages[currentIndex].src;
      lightboxImage.alt = galleryImages[currentIndex].alt;
      lightboxTitle.textContent = galleryImages[currentIndex].title;
      lightboxDescription.textContent = galleryImages[currentIndex].description;

      // Remove fade out and add fade in
      lightboxImage.classList.remove('fade-out');
      lightboxImage.classList.add('fade-in');

      // Remove animation class after animation completes
      setTimeout(() => {
        lightboxImage.classList.remove('fade-in');
      }, 300);
    }, 300);
  }

  function zoomImage(factor) {
    const newScale = currentScale * factor;
    if (newScale >= 1 && newScale <= 4) {
      currentScale = newScale;
      updateImageTransform();
    }
  }

  function updateImageTransform() {
    const lightboxImage = document.getElementById('lightbox-image');
    lightboxImage.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
  }

  function toggleFullscreen() {
    const lightbox = document.getElementById('photo-lightbox');
    if (!document.fullscreenElement) {
      lightbox.requestFullscreen().catch(err => {
        console.error(`Error attempting to enable fullscreen: ${err.message}`);
      });
    } else {
      document.exitFullscreen();
    }
  }

  function downloadImage() {
    const lightboxImage = document.getElementById('lightbox-image');
    const link = document.createElement('a');
    link.href = lightboxImage.src;
    link.download = `photo-${currentIndex + 1}.jpg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Initialize lightbox when DOM is loaded
  document.addEventListener('DOMContentLoaded', setupLightbox);

  // For Astro view transitions
  document.addEventListener('astro:after-swap', setupLightbox);
</script>
