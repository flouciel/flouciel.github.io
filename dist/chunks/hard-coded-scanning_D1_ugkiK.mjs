import { c as createComponent, m as maybeRenderHead, u as unescapeHTML, a as renderTemplate, s as spreadAttributes } from './astro/server_Q3wgTVI0.mjs';
import { g as getImage } from './_astro_assets_BtQnzTra.mjs';
import 'clsx';

const Astro__Z1Qyl9D = new Proxy({"src":"/_astro/sleep-meme.CYB4NoMy.png","width":756,"height":744,"format":"png"}, {
						get(target, name, receiver) {
							if (name === 'clone') {
								return structuredClone(target);
							}
							if (name === 'fsPath') {
								return "/Users/4azy/lune/code/flouciel.github.io/src/assets/images/sleep-meme.png";
							}
							if (target[name] !== undefined && globalThis.astroAsset) globalThis.astroAsset?.referencedImages.add("/Users/4azy/lune/code/flouciel.github.io/src/assets/images/sleep-meme.png");
							return target[name];
						}
					});

const Astro__ZK6nXI = new Proxy({"src":"/_astro/gitleaks-diagram.CAH6YRN8.png","width":1290,"height":557,"format":"png"}, {
						get(target, name, receiver) {
							if (name === 'clone') {
								return structuredClone(target);
							}
							if (name === 'fsPath') {
								return "/Users/4azy/lune/code/flouciel.github.io/src/assets/images/gitleaks-diagram.png";
							}
							if (target[name] !== undefined && globalThis.astroAsset) globalThis.astroAsset?.referencedImages.add("/Users/4azy/lune/code/flouciel.github.io/src/assets/images/gitleaks-diagram.png");
							return target[name];
						}
					});

const images = async function(html) {
					const imageSources = {};
					{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "@assets/images/sleep-meme\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "@assets/images/sleep-meme.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__Z1Qyl9D, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "@assets/images/gitleaks-diagram\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "@assets/images/gitleaks-diagram.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__ZK6nXI, ...props});
													occurrenceCounter++;
											}
									}
					return imageSources;
			};

			async function updateImageReferences(html) {
				return images(html).then((imageSources) => {
						return html.replaceAll(/__ASTRO_IMAGE_="([^"]+)"/gm, (full, imagePath) => {
								const decodedImagePath = JSON.parse(imagePath.replace(/&#x22;/g, '"'));
		
								// Use the 'index' property for each image occurrence
								const srcKey = decodedImagePath.src + '_' + decodedImagePath.index;
		
								if (imageSources[srcKey].srcSet && imageSources[srcKey].srcSet.values.length > 0) {
										imageSources[srcKey].attributes.srcset = imageSources[srcKey].srcSet.attribute;
								}
		
								const { index, ...attributesWithoutIndex } = imageSources[srcKey].attributes;
		
								return spreadAttributes({
										src: imageSources[srcKey].src,
										...attributesWithoutIndex,
								});
						});
				});
		}
		

		// NOTE: This causes a top-level await to appear in the user's code, which can break very easily due to a Rollup
	  // bug and certain adapters not supporting it correctly. See: https://github.com/rollup/rollup/issues/4708
	  // Tread carefully!
			const html = await updateImageReferences("<h2 id=\"the-backstage\">The Backstage</h2>\n<p>If secrets are so sensitive, why do developers still hard code them in the codebase? It’s not because they aren’t concerned about security, they understand the risks of exposed secrets. But real world development is messy and often siloed, filled with challenges that make security an afterthought. We all have deep respect for our developers, they’re incredibly smart and deeply knowledgeable about their code. Deadlines are tight, so many features are in the queue, debugging needs to be fast, and occasionally, developers just need to get things done. Security extra steps will be in the backlog with the seatbelt <em>“Will remove later”</em>.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/sleep-meme.png&#x22;,&#x22;alt&#x22;:&#x22;sleep-meme&#x22;,&#x22;index&#x22;:0}\"></p>\n<h2 id=\"its-not-a-bug-its-human-nature\">It’s not a bug, it’s human nature</h2>\n<p>Developers are wired to solve problems efficiently. Hard coding a secret might feel like the simplest way to keep things moving. It happens for a few key reasons:</p>\n<h4 id=\"a-false-sense-of-security\"><span class=\"accent\">A false sense of security</span></h4>\n<ul>\n<li><em>“It’s just an internal repo”</em></li>\n<li><em>“Only our team has access”</em></li>\n<li><em>“It’s buried deep in code, no one will find it”</em></li>\n</ul>\n<p>These assumptions feel reasonable until they’re not. Internal repos can get exposed. Access controls can be broken. Your VCS environment can leak out. That AWS key you hard coded for convenience? It’s one leaked commit away from becoming a security nightmare.</p>\n<h4 id=\"speed-versus-security\"><span class=\"accent\">Speed versus Security </span></h4>\n<p>Hard coding secrets makes things work now. And in a fast moving development cycle, “now” often wins.</p>\n<ul>\n<li>Rapid prototyping? Just drop in an API key.</li>\n<li>Debugging an issue? Hard coded credentials to test faster.</li>\n<li>Collaborating with teammates? Share keys in the code.</li>\n</ul>\n<p>It’s always meant to be temporary, until it isn’t.</p>\n<h4 id=\"the-unintentional-mistake\"><span class=\"accent\">The unintentional mistake</span></h4>\n<p>Not all hard coded secrets are intentional. Sometimes they sneak in:</p>\n<ul>\n<li>Test credentials get left in the final commit.</li>\n<li>Copied snippet from Stack Overflow or AI generated includes an embedded key.</li>\n<li>A .gitignore rule is misconfigured, and a sensitive file gets pushed.</li>\n</ul>\n<p>No one means to leak secrets. But when security relies on remembering an extra step, mistakes happen. A secret that was meant to be removed later gets forgotten. A piece of test code accidentally makes it into production. A private repository becomes public. And suddenly, what seemed like a harmless decision turns into a security incident.</p>\n<h2 id=\"the-real-cost-of-leaked-secrets\">The Real Cost of Leaked Secrets</h2>\n<p>The worst part? We don’t see the cost of a secret leak until it’s leaked. Maybe nothing happens, until a hacker stumbles upon it, a service revokes your key, or an entire system is compromised.</p>\n<p>Hard coding secrets isn’t just a bad habit. It’s a risk that grows silently until it <a href=\"https://www.ibm.com/reports/data-breach\">explodes</a>.</p>\n<h3 id=\"how-do-we-catch-this\">How Do We Catch This?</h3>\n<p>We don’t just enforce security, we work <em>with</em> developers, not against them. Security should integrate smoothly into the their daily SDLC which called AppSec processes without slowing teams down.</p>\n<h4 id=\"a-real-world-example\">A Real World Example</h4>\n<p>Let’s say we’re working at a <strong>blitzscaling startup</strong>, where the product is developing at lightning speed to hit MVP and keep up with agile demands. The focus is on shipping fast , not security</p>\n<ul>\n<li><strong>Cost is minimal</strong> : there’s no budget for fancy security tools like commercial SAST tools</li>\n<li><strong>GitLab is self-hosted</strong> : no built-in  security scanning.</li>\n<li><strong>Developer habits</strong> : secrets, API keys, and credentials are often committed directly to the code because it’s “internal.”</li>\n</ul>\n<p>Without expensive tools, we try to bake open source tool called Gitleaks into our CI/CD pipeline. We chose this for its customizable regex rules and speed. Here’s what we propose with goals rolling our scanning at scale.</p>\n<p>In GitLab, each project has its own <strong><code>.gitlab-ci.yml</code></strong> file, defining its CI/CD pipeline. But managing security scans <strong>project by project</strong> doesn’t scale well. We would need to manually add and update security rules in every repo, not happening.</p>\n<p>Instead, we <strong>leverage pipeline includes</strong>. This works like importing a library in code: we define a <strong>centralized security pipeline</strong> in a dedicated repo and then include it in every project’s <strong><code>.gitlab-ci.yml</code></strong>.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/gitleaks-diagram.png&#x22;,&#x22;alt&#x22;:&#x22;gitleaks-diagram&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>How it works:</p>\n<ul>\n<li>Centralized Repo: We already have a dedicated repo maintained by <strong>DevOps team</strong>, defining general security policies. In this repo, we create a <strong>security config template</strong> that includes customized rules (keep reference copy in S3 bucket)</li>\n<li>Each working repo includes the centralized <strong>security pipeline</strong></li>\n<li><strong>Scan results (artifacts)</strong> are automatically <strong>uploaded to S3</strong> for investigation</li>\n</ul>\n<p>Here is the sample of gitleaks-ci.yml</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#E06C75\">stages</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">  - </span><span style=\"color:#98C379\">secret-detection</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E06C75\">.gitleaks-rules</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#C678DD\">&#x26;</span><span style=\"color:#E5C07B\">gitleaks-rules</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  image</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  stage</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">secret-detection</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  tags</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">share-nonprod</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  script</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">aws s3 cp s3://share//gitlab-ci/security/gitleaks-rules.toml \"$CI_PROJECT_DIR\"/gitleaks-rules.toml</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  artifacts</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    paths</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">gitleaks-rules.toml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E06C75\">.gitleaks-scan</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#C678DD\">&#x26;</span><span style=\"color:#E5C07B\">gitleaks-scan</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  image</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    name</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">path/dev-gitleaks:latest</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    entrypoint</span><span style=\"color:#ABB2BF\">: [</span><span style=\"color:#98C379\">\"\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  stage</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">secret-detection</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\"> </span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  tags</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">share-nonprod</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  needs</span><span style=\"color:#ABB2BF\">: []</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  variables</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    GIT_DEPTH</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  before_script</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">git config --global --add safe.directory \"${CI_PROJECT_DIR}\"</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  script</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">gitleaks detect --config gitleaks-rules.toml ${TRACE+--log-level debug} --report-path gitleaks.output.json</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  artifacts</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    name</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG $CI_COMMIT_SHORT_SHA\"</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    when</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">always</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    paths</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">gitleaks.*</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E06C75\">.gitleaks-output-upload-to-s3</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#C678DD\">&#x26;</span><span style=\"color:#E5C07B\">gitleaks-output-upload-to-s3</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  stage</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">secret-detection</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  tags</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">share-nonprod</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  needs</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">gitleaks-scan</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  image</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  script</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">aws s3 cp gitleaks.* s3://secret-scan/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH/</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    - </span><span style=\"color:#98C379\">echo \"uploaded successful\"</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"final-thoughts\">Final thoughts</h2>\n<p>Ater detecting the secrets, simply deleting a secret from the latest commit <strong>does not mean it’s gone</strong>, it’s already in history, caches, forks, and clones. Attackers and automated tools can still find and exploit it.</p>\n<p>Some next moves:</p>\n<ul>\n<li>Use centralized secret manager like <strong>AWS Secrets Manager, HashiCorp Vault, or Doppler</strong></li>\n<li>Enforce pre-commit with gitleaks to catch secrets before dev commits</li>\n<li>Security Awareness, work with them, and educate your teams</li>\n<li>Rotate and monitor secret</li>\n</ul>");
	

				const frontmatter = {"title":"Secure Your Codebase Secrets Scanning","author":"Hazy","pubDatetime":"2025-03-13T00:00:00.000Z","featured":false,"draft":false,"tags":["secrets scanning","application security","appsec","security"],"description":"Think about managing the risks of hard coded secrets."};
				const file = "/Users/4azy/lune/code/flouciel.github.io/src/content/blog/hard-coded-scanning.md";
				const url = undefined;
				function rawContent() {
					return "\n## The Backstage\n\nIf secrets are so sensitive, why do developers still hard code them in the codebase? It's not because they aren't concerned about security, they understand the risks of exposed secrets. But real world development is messy and often siloed, filled with challenges that make security an afterthought. We all have deep respect for our developers, they're incredibly smart and deeply knowledgeable about their code. Deadlines are tight, so many features are in the queue, debugging needs to be fast, and occasionally, developers just need to get things done. Security extra steps will be in the backlog with the seatbelt *\"Will remove later\"*.\n\n![sleep-meme](@assets/images/sleep-meme.png)\n\n## It's not a bug, it's human nature\n\nDevelopers are wired to solve problems efficiently. Hard coding a secret might feel like the simplest way to keep things moving. It happens for a few key reasons:\n\n#### <span class=\"accent\">A false sense of security</span>\n- *\"It's just an internal repo\"*\n- *\"Only our team has access\"*\n- *\"It's buried deep in code, no one will find it\"*\n\nThese assumptions feel reasonable until they're not. Internal repos can get exposed. Access controls can be broken. Your VCS environment can leak out. That AWS key you hard coded for convenience? It's one leaked commit away from becoming a security nightmare.\n\n#### <span class=\"accent\">Speed versus Security </span>\n\nHard coding secrets makes things work now. And in a fast moving development cycle, \"now\" often wins.\n- Rapid prototyping? Just drop in an API key.\n- Debugging an issue? Hard coded credentials to test faster.\n- Collaborating with teammates? Share keys in the code.\n\t\t\nIt's always meant to be temporary, until it isn't.\n\n#### <span class=\"accent\">The unintentional mistake</span>\n\nNot all hard coded secrets are intentional. Sometimes they sneak in:\n\n- Test credentials get left in the final commit.\n- Copied snippet from Stack Overflow or AI generated includes an embedded key.\n- A .gitignore rule is misconfigured, and a sensitive file gets pushed.\n\nNo one means to leak secrets. But when security relies on remembering an extra step, mistakes happen. A secret that was meant to be removed later gets forgotten. A piece of test code accidentally makes it into production. A private repository becomes public. And suddenly, what seemed like a harmless decision turns into a security incident. \n\n## The Real Cost of Leaked Secrets\n\nThe worst part? We don't see the cost of a secret leak until it's leaked. Maybe nothing happens, until a hacker stumbles upon it, a service revokes your key, or an entire system is compromised.\n\nHard coding secrets isn't just a bad habit. It's a risk that grows silently until it [explodes](https://www.ibm.com/reports/data-breach).\n\n### How Do We Catch This?\n\nWe don't just enforce security, we work _with_ developers, not against them. Security should integrate smoothly into the their daily SDLC which called AppSec processes without slowing teams down.\n\n#### A Real World Example\n\nLet's say we're working at a **blitzscaling startup**, where the product is developing at lightning speed to hit MVP and keep up with agile demands. The focus is on shipping fast , not security\n\n- **Cost is minimal** : there’s no budget for fancy security tools like commercial SAST tools\n- **GitLab is self-hosted** : no built-in  security scanning.\n- **Developer habits** : secrets, API keys, and credentials are often committed directly to the code because it's “internal.”\n\nWithout expensive tools, we try to bake open source tool called Gitleaks into our CI/CD pipeline. We chose this for its customizable regex rules and speed. Here's what we propose with goals rolling our scanning at scale.\n\nIn GitLab, each project has its own **`.gitlab-ci.yml`** file, defining its CI/CD pipeline. But managing security scans **project by project** doesn't scale well. We would need to manually add and update security rules in every repo, not happening.\n\nInstead, we **leverage pipeline includes**. This works like importing a library in code: we define a **centralized security pipeline** in a dedicated repo and then include it in every project's **`.gitlab-ci.yml`**.\n\n![gitleaks-diagram](@assets/images/gitleaks-diagram.png)\n\nHow it works:\n- Centralized Repo: We already have a dedicated repo maintained by **DevOps team**, defining general security policies. In this repo, we create a **security config template** that includes customized rules (keep reference copy in S3 bucket) \n- Each working repo includes the centralized **security pipeline**\n- **Scan results (artifacts)** are automatically **uploaded to S3** for investigation\n\nHere is the sample of gitleaks-ci.yml\n```yaml\nstages:\n  - secret-detection\n\n.gitleaks-rules: &gitleaks-rules\n  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\n  stage: secret-detection\n  tags:\n    - share-nonprod\n  script:\n    - aws s3 cp s3://share//gitlab-ci/security/gitleaks-rules.toml \"$CI_PROJECT_DIR\"/gitleaks-rules.toml\n  artifacts:\n    paths:\n      - gitleaks-rules.toml\n\n.gitleaks-scan: &gitleaks-scan\n  image:\n    name: path/dev-gitleaks:latest\n    entrypoint: [\"\"]\n  stage: secret-detection\n \n  tags:\n    - share-nonprod\n  needs: []\n  variables:\n    GIT_DEPTH: 0\n  before_script:\n    - git config --global --add safe.directory \"${CI_PROJECT_DIR}\"\n  script:\n    - gitleaks detect --config gitleaks-rules.toml ${TRACE+--log-level debug} --report-path gitleaks.output.json\n  artifacts:\n    name: \"$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG $CI_COMMIT_SHORT_SHA\"\n    when: always\n    paths:\n      - gitleaks.*\n\n.gitleaks-output-upload-to-s3: &gitleaks-output-upload-to-s3\n  stage: secret-detection\n  tags:\n    - share-nonprod\n  needs:\n    - gitleaks-scan\n  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\n  script:\n    - aws s3 cp gitleaks.* s3://secret-scan/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH/\n    - echo \"uploaded successful\"\n```\n## Final thoughts\nAter detecting the secrets, simply deleting a secret from the latest commit **does not mean it's gone**, it's already in history, caches, forks, and clones. Attackers and automated tools can still find and exploit it.\n\nSome next moves: \n- Use centralized secret manager like **AWS Secrets Manager, HashiCorp Vault, or Doppler** \n- Enforce pre-commit with gitleaks to catch secrets before dev commits\n- Security Awareness, work with them, and educate your teams\n- Rotate and monitor secret \n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"the-backstage","text":"The Backstage"},{"depth":2,"slug":"its-not-a-bug-its-human-nature","text":"It’s not a bug, it’s human nature"},{"depth":4,"slug":"a-false-sense-of-security","text":"A false sense of security"},{"depth":4,"slug":"speed-versus-security","text":"Speed versus Security "},{"depth":4,"slug":"the-unintentional-mistake","text":"The unintentional mistake"},{"depth":2,"slug":"the-real-cost-of-leaked-secrets","text":"The Real Cost of Leaked Secrets"},{"depth":3,"slug":"how-do-we-catch-this","text":"How Do We Catch This?"},{"depth":4,"slug":"a-real-world-example","text":"A Real World Example"},{"depth":2,"slug":"final-thoughts","text":"Final thoughts"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
