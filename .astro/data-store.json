[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.8.1","content-config-digest","8c697db7c84a3de8","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://flouciel.github.io/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{\"jpeg\":{\"quality\":98,\"compressionLevel\":8},\"jpg\":{\"quality\":98,\"compressionLevel\":8},\"png\":{\"quality\":100,\"compressionLevel\":8},\"webp\":{\"quality\":98,\"compressionLevel\":8},\"avif\":{\"quality\":98,\"compressionLevel\":8}}},\"domains\":[\"localhost\"],\"remotePatterns\":[{\"protocol\":\"https\",\"hostname\":\"**.githubusercontent.com\"},{\"protocol\":\"https\",\"hostname\":\"**.github.io\"}],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"one-dark-pro\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[null,[null,{\"test\":\"Table of contents\"}]],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,79,80,125,126,165,166,218,219,265,266,301,302],"ios-jailbreak-type",{"id":11,"data":13,"body":24,"filePath":25,"assetImports":26,"digest":32,"rendered":33,"legacyId":78},{"author":14,"pubDatetime":15,"title":16,"featured":17,"draft":17,"tags":18,"description":23},"Hazy",["Date","2024-10-14T00:00:00.000Z"],"Thoughts on Jailbreak",false,[19,20,21,22],"iOS","Mobile","jailbreak","security","Jailbreaking an iPhone refers to bypassing the restrictions and limitations set by Apple's iOS.","## Why Need to Jailbreak\n### Apple’s App Sandbox\n\nOn iOS, every app operates within its own sandbox, ensuring it can only access data stored in its unique home directory. If an app needs to access data outside its directory - like files in iCloud or photos - it must use specific iOS services. This sandboxing means that other apps can't read or alter your app's data, keeping it secure and isolated.\n![app-sandbox](@assets/images/2024-10-15-11-31-39.png)\n\nApple’s App Sandbox leverages UNIX user permissions to ensure apps run with the less privileged \u003Cspan class=\"accent\">\"mobile\"\u003C/span> user. Anything outside the app’s home directory is mounted as read-only. \niOS includes robust measures to prevent memory-related security vulnerabilities. One key method is \u003Cspan class=\"accent\">Address Space Layout Randomization (ASLR)\u003C/span>, which randomizes the memory regions assigned to each app every time it starts. This makes it much harder for attackers to exploit memory corruption bugs. Additionally, memory pages are marked as non-executable using \u003Cspan class=\"accent\">ARM’s Execute Never (XN)\u003C/span> feature, which prevents malicious code from being executed\n\n### Benefits of Jailbreak\nJailbreaking is about breaking free from the constraints imposed by Apple's App Sandbox and security features. It removes these limitations, allowing users to control their devices fully. This includes:\n- Access to system files\n- Installation of unauthorized apps\n- Ability to tweak system settings that are normally restricted\nIn short, jailbreaking provides root access, enabling a level of customization and functionality that Apple's standard security doesn’t permit.\n\n### Drawback\n\n> **Warning**: Jailbreaking your iDevice greatly compromises its security. It is not advisable to perform this on your primary device. A jailbroken device is for penetration testing only, not for regular use.\n\n- Security Vulnerabilities: Bypassing Apple’s security can expose your device to malware and unauthorized access.\n- Stability Issues: Jailbreaking may lead to system instability or crashes due to untested modifications.\n\n### Run on a Real Device\nUnlike Android, which offers a range of options like \u003Cspan class=\"accent\">Android Virtual Device (AVD)\u003C/span> and other emulators that replicate actual hardware, iOS only provides Xcode’s Simulator. This tool mimics the software environment but not the hardware, and it uses x86 code for emulator binaries instead of ARM code. As a result, apps compiled for real devices won't run on the simulator, making it ineffective for black box analysis and reverse engineering.\n![XCode Simulator](@assets/images/2024-10-15-13-28-03.png)\n\nIs there an iOS emulator? Yes, \u003Cspan class=\"accent\">Corellium\u003C/span> is an option. However, it's an enterprise SaaS solution with a per-user license model and does not offer a trial version. Therefore, for effective iOS app penetration testing, using a real iOS device is necessary to accurately identify and address vulnerabilities.\n\nHere is a useful article which will explain the differences between a real device and the iOS simulator. In short, here’s a summary of the key differences between testing an iOS app on the simulator versus a real device:\n- Compilation Differences: Code is compiled for x86 architecture on the simulator and ARM architecture on real devices, meaning the compiled code you test in the simulator isn't the same as what runs on a device.\n- API Limitations: Certain APIs, such as those for push notifications, camera, and microphone, aren't available in the simulator. Testing these features requires a real device.\n- Performance Constraints: Real devices have less memory, storage, and processing power compared to the simulator. This can lead to noticeable performance differences, especially with resource-intensive tasks.\n- Interaction Differences: Clicking on the simulator is different from tapping on a real device. Buttons that are easy to click on the simulator may be difficult to tap on a real device, affecting usability.\n- Gesture Testing: Testing gestures like pinches and swipes are more challenging with a mouse pointer in the simulator than with actual fingers on a real device.\n\n## Types of Jailbreak\nNot all jailbreaks work in the same way. This page will take you through each type of jailbreak and explain how they work.\n(This section is copied from [ios.cfw.guide](https://ios.cfw.guide))\n### 1. Untethered Jailbreaks\nUntethered jailbreaks can be considered the holy grail of all jailbreaks. They only require the exploit to be ran once either via a website, an app or a computer.\n![untethe](@assets/images/2024-10-15-13-52-54.png)\n\nAfter that, your device is fully jailbroken and won't require any further action. The exploit will stay on a device even after you reboot it.\nUnfortunately, there hasn't been a new untethered jailbreak for end users in a very long time, and it's likely we won't see one for even longer.\nThe only downside to an untethered jailbreak is that if something goes wrong, it could very well result in a bootloop requiring you to restore your device via iTunes or Finder (macOS Catalina or newer). The likelihood of this happening is low, but is indeed possible.\nA few examples of untethered jailbreaks are p0sixspwn and Pangu9.\n\n### 2. Semi-Untethered Jailbreaks\nSemi-untethered jailbreaks have been the most popular type of jailbreak in recent years. This type of jailbreak requires an exploit to be executed every time you reboot or turn off your device.\n![semi-unte](@assets/images/2024-10-15-13-53-10.png)\n\nThis jailbreak works by running the exploit through an app or website on the device itself. Due to the nature of how the exploit is ran, however, these jailbreaks are easily removable through their respective app.\nA few examples of semi-untethered jailbreaks include Taurine, Dopamine, and Odyssey.\n\n### 3. Semi-Tethered Jailbreaks\nSemi-tethered jailbreaks are very similar to semi-untethered jailbreaks, however the exploit must be ran using a computer rather than using a sideloaded app.\n![semi-te](@assets/images/2024-10-15-13-53-27.png)\n\nDue to requiring a computer to rejailbreak after every reboot, most choose to use a semi-untethered jailbreak instead.\nA few examples of a semi-tethered jailbreak include palera1n and Odysseyra1n.\n### 4. Tethered Jailbreaks\nTethered jailbreaks are not meant to be used by the general public. These exploits modify the device in a way that it requires a PC to even boot at all, even without a jailbreak.\nBecause of this, these tend to only be used by jailbreak developers getting ready for a newer version of iOS.\n\n## References:\n- https://quickbirdstudios.com/blog/ios-app-security-best-practices/\n- https://support.apple.com/en-vn/guide/security/sec15bfe098e/web\n- https://ios.cfw.guide/types-of-jailbreak/\n- https://roadfiresoftware.com/2015/04/will-an-ios-app-run-on-a-device-the-same-way-it-does-on-the-ios-simulator/","src/content/blog/ios-jailbreak-type.md",[27,28,29,30,31],"@assets/images/2024-10-15-11-31-39.png","@assets/images/2024-10-15-13-28-03.png","@assets/images/2024-10-15-13-52-54.png","@assets/images/2024-10-15-13-53-10.png","@assets/images/2024-10-15-13-53-27.png","115a18f9341a6c97",{"html":34,"metadata":35},"\u003Ch2 id=\"why-need-to-jailbreak\">Why Need to Jailbreak\u003C/h2>\n\u003Ch3 id=\"apples-app-sandbox\">Apple’s App Sandbox\u003C/h3>\n\u003Cp>On iOS, every app operates within its own sandbox, ensuring it can only access data stored in its unique home directory. If an app needs to access data outside its directory - like files in iCloud or photos - it must use specific iOS services. This sandboxing means that other apps can’t read or alter your app’s data, keeping it secure and isolated.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-11-31-39.png&#x22;,&#x22;alt&#x22;:&#x22;app-sandbox&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Apple’s App Sandbox leverages UNIX user permissions to ensure apps run with the less privileged \u003Cspan class=\"accent\">“mobile”\u003C/span> user. Anything outside the app’s home directory is mounted as read-only.\niOS includes robust measures to prevent memory-related security vulnerabilities. One key method is \u003Cspan class=\"accent\">Address Space Layout Randomization (ASLR)\u003C/span>, which randomizes the memory regions assigned to each app every time it starts. This makes it much harder for attackers to exploit memory corruption bugs. Additionally, memory pages are marked as non-executable using \u003Cspan class=\"accent\">ARM’s Execute Never (XN)\u003C/span> feature, which prevents malicious code from being executed\u003C/p>\n\u003Ch3 id=\"benefits-of-jailbreak\">Benefits of Jailbreak\u003C/h3>\n\u003Cp>Jailbreaking is about breaking free from the constraints imposed by Apple’s App Sandbox and security features. It removes these limitations, allowing users to control their devices fully. This includes:\u003C/p>\n\u003Cul>\n\u003Cli>Access to system files\u003C/li>\n\u003Cli>Installation of unauthorized apps\u003C/li>\n\u003Cli>Ability to tweak system settings that are normally restricted\nIn short, jailbreaking provides root access, enabling a level of customization and functionality that Apple’s standard security doesn’t permit.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"drawback\">Drawback\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>Warning\u003C/strong>: Jailbreaking your iDevice greatly compromises its security. It is not advisable to perform this on your primary device. A jailbroken device is for penetration testing only, not for regular use.\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>Security Vulnerabilities: Bypassing Apple’s security can expose your device to malware and unauthorized access.\u003C/li>\n\u003Cli>Stability Issues: Jailbreaking may lead to system instability or crashes due to untested modifications.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"run-on-a-real-device\">Run on a Real Device\u003C/h3>\n\u003Cp>Unlike Android, which offers a range of options like \u003Cspan class=\"accent\">Android Virtual Device (AVD)\u003C/span> and other emulators that replicate actual hardware, iOS only provides Xcode’s Simulator. This tool mimics the software environment but not the hardware, and it uses x86 code for emulator binaries instead of ARM code. As a result, apps compiled for real devices won’t run on the simulator, making it ineffective for black box analysis and reverse engineering.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-13-28-03.png&#x22;,&#x22;alt&#x22;:&#x22;XCode Simulator&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Is there an iOS emulator? Yes, \u003Cspan class=\"accent\">Corellium\u003C/span> is an option. However, it’s an enterprise SaaS solution with a per-user license model and does not offer a trial version. Therefore, for effective iOS app penetration testing, using a real iOS device is necessary to accurately identify and address vulnerabilities.\u003C/p>\n\u003Cp>Here is a useful article which will explain the differences between a real device and the iOS simulator. In short, here’s a summary of the key differences between testing an iOS app on the simulator versus a real device:\u003C/p>\n\u003Cul>\n\u003Cli>Compilation Differences: Code is compiled for x86 architecture on the simulator and ARM architecture on real devices, meaning the compiled code you test in the simulator isn’t the same as what runs on a device.\u003C/li>\n\u003Cli>API Limitations: Certain APIs, such as those for push notifications, camera, and microphone, aren’t available in the simulator. Testing these features requires a real device.\u003C/li>\n\u003Cli>Performance Constraints: Real devices have less memory, storage, and processing power compared to the simulator. This can lead to noticeable performance differences, especially with resource-intensive tasks.\u003C/li>\n\u003Cli>Interaction Differences: Clicking on the simulator is different from tapping on a real device. Buttons that are easy to click on the simulator may be difficult to tap on a real device, affecting usability.\u003C/li>\n\u003Cli>Gesture Testing: Testing gestures like pinches and swipes are more challenging with a mouse pointer in the simulator than with actual fingers on a real device.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"types-of-jailbreak\">Types of Jailbreak\u003C/h2>\n\u003Cp>Not all jailbreaks work in the same way. This page will take you through each type of jailbreak and explain how they work.\n(This section is copied from \u003Ca href=\"https://ios.cfw.guide\">ios.cfw.guide\u003C/a>)\u003C/p>\n\u003Ch3 id=\"1-untethered-jailbreaks\">1. Untethered Jailbreaks\u003C/h3>\n\u003Cp>Untethered jailbreaks can be considered the holy grail of all jailbreaks. They only require the exploit to be ran once either via a website, an app or a computer.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-13-52-54.png&#x22;,&#x22;alt&#x22;:&#x22;untethe&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>After that, your device is fully jailbroken and won’t require any further action. The exploit will stay on a device even after you reboot it.\nUnfortunately, there hasn’t been a new untethered jailbreak for end users in a very long time, and it’s likely we won’t see one for even longer.\nThe only downside to an untethered jailbreak is that if something goes wrong, it could very well result in a bootloop requiring you to restore your device via iTunes or Finder (macOS Catalina or newer). The likelihood of this happening is low, but is indeed possible.\nA few examples of untethered jailbreaks are p0sixspwn and Pangu9.\u003C/p>\n\u003Ch3 id=\"2-semi-untethered-jailbreaks\">2. Semi-Untethered Jailbreaks\u003C/h3>\n\u003Cp>Semi-untethered jailbreaks have been the most popular type of jailbreak in recent years. This type of jailbreak requires an exploit to be executed every time you reboot or turn off your device.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-13-53-10.png&#x22;,&#x22;alt&#x22;:&#x22;semi-unte&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This jailbreak works by running the exploit through an app or website on the device itself. Due to the nature of how the exploit is ran, however, these jailbreaks are easily removable through their respective app.\nA few examples of semi-untethered jailbreaks include Taurine, Dopamine, and Odyssey.\u003C/p>\n\u003Ch3 id=\"3-semi-tethered-jailbreaks\">3. Semi-Tethered Jailbreaks\u003C/h3>\n\u003Cp>Semi-tethered jailbreaks are very similar to semi-untethered jailbreaks, however the exploit must be ran using a computer rather than using a sideloaded app.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-13-53-27.png&#x22;,&#x22;alt&#x22;:&#x22;semi-te&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Due to requiring a computer to rejailbreak after every reboot, most choose to use a semi-untethered jailbreak instead.\nA few examples of a semi-tethered jailbreak include palera1n and Odysseyra1n.\u003C/p>\n\u003Ch3 id=\"4-tethered-jailbreaks\">4. Tethered Jailbreaks\u003C/h3>\n\u003Cp>Tethered jailbreaks are not meant to be used by the general public. These exploits modify the device in a way that it requires a PC to even boot at all, even without a jailbreak.\nBecause of this, these tend to only be used by jailbreak developers getting ready for a newer version of iOS.\u003C/p>\n\u003Ch2 id=\"references\">References:\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://quickbirdstudios.com/blog/ios-app-security-best-practices/\">https://quickbirdstudios.com/blog/ios-app-security-best-practices/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://support.apple.com/en-vn/guide/security/sec15bfe098e/web\">https://support.apple.com/en-vn/guide/security/sec15bfe098e/web\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://ios.cfw.guide/types-of-jailbreak/\">https://ios.cfw.guide/types-of-jailbreak/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://roadfiresoftware.com/2015/04/will-an-ios-app-run-on-a-device-the-same-way-it-does-on-the-ios-simulator/\">https://roadfiresoftware.com/2015/04/will-an-ios-app-run-on-a-device-the-same-way-it-does-on-the-ios-simulator/\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":36,"localImagePaths":72,"remoteImagePaths":73,"frontmatter":74,"imagePaths":77},[37,41,45,48,51,54,57,60,63,66,69],{"depth":38,"slug":39,"text":40},2,"why-need-to-jailbreak","Why Need to Jailbreak",{"depth":42,"slug":43,"text":44},3,"apples-app-sandbox","Apple’s App Sandbox",{"depth":42,"slug":46,"text":47},"benefits-of-jailbreak","Benefits of Jailbreak",{"depth":42,"slug":49,"text":50},"drawback","Drawback",{"depth":42,"slug":52,"text":53},"run-on-a-real-device","Run on a Real Device",{"depth":38,"slug":55,"text":56},"types-of-jailbreak","Types of Jailbreak",{"depth":42,"slug":58,"text":59},"1-untethered-jailbreaks","1. Untethered Jailbreaks",{"depth":42,"slug":61,"text":62},"2-semi-untethered-jailbreaks","2. Semi-Untethered Jailbreaks",{"depth":42,"slug":64,"text":65},"3-semi-tethered-jailbreaks","3. Semi-Tethered Jailbreaks",{"depth":42,"slug":67,"text":68},"4-tethered-jailbreaks","4. Tethered Jailbreaks",{"depth":38,"slug":70,"text":71},"references","References:",[27,28,29,30,31],[],{"title":16,"author":14,"pubDatetime":75,"featured":17,"draft":17,"tags":76,"description":23},["Date","2024-10-14T00:00:00.000Z"],[19,20,21,22],[27,28,29,30,31],"ios-jailbreak-type.md","rethinking-threat-modeling",{"id":79,"data":81,"body":89,"filePath":90,"assetImports":91,"digest":95,"rendered":96,"legacyId":124},{"author":14,"pubDatetime":82,"title":83,"featured":17,"draft":17,"tags":84,"description":88},["Date","2025-03-10T00:00:00.000Z"],"Rethinking Threat Modeling",[85,86,87,22],"threat modeling","application security","appsec","Threat modeling is a proactive approach to identifying vulnerabilities and implementing effective security measures.","Categories of readers when discussing Threat Modeling:\n- Never heard of it, no prior knowledge.\n- Familiar with the concept but not used it in practice.\n- Experts in the field with extensive experience and deep understanding.\n\nYou will likely see yourself in one of the 3 categories above. No matter which one you fall into, you're not alone. This post is not tailored to a specific group, and neither an oversimplified introduction nor an in-depth deep dive.\n\nLet's begin.\n\n> I think I can turn this into a series. This post will be the prologue.\n\n## Threat Modeling TLDR version\n\nThreat Modeling is a broad term and can mean very different things depend on your category. \n\nIn practical terms:  Threat modeling is the process of determining which assets are in the system and how we will secure them from the start. This involves analyzing the system's design to define the assets, brainstorming potential threats, and collaboratively developing mitigation strategies to protect them -> \u003Cspan class=\"accent\"> proactive security\u003C/span>.\n\n> It's all about the risk management!\n\n![threat-meme](@assets/images/threat-meme.png)\n### Benefits\n\n- Find potential issues early. Enforce the strict and suffiecient rules while increasing risk awareness.\n- Deliver more secure software. Security is not blocker.\n- Reduce cost of mitigation\n\n![risk-diagram](@assets/images/risk-diagram.png)\n\nIt's crucial to understand that threats will always present in our products. Some risks might not seem significant when viewed in isolation. However, when combined with other vulnerabilities or system components, they can create a chain interaction that leads to a serious security threat. Threat modeling helps identify and mitigate these risks early, ensuring a more secure foundation from the start.\n\nYes, \u003Cspan class=\"accent\"> secure by design\u003C/span>. This term is one of our main goals when doing threat modeling. We cannot be certain that 100% risks will occur or can be predicted. But we believe that the output of threat modeling - a set of potential issues is a good material for pentesting, red teaming exercises, and leads to fewer issues or reduced impact in later phases.\n\n### Threat Modeling Manifesto\n\nThe problem lies in the questions themselves, and our solution is to find the right answers. When it comes to threat modeling, Adam Shostack outlines four key questions:\n\n1. What are we working on? \n2. What can go wrong?\n3. What are we going to do about it?\n4. Did we do a good enough job? \n\n![4-questions](@assets/images/4-questions.png)\n\n Check it out on the website and his books\n\n -> [Threat Modeling Manifesto](https://www.threatmodelingmanifesto.org),\n\n -> [Threat Modeling: Designing for Security](https://shostack.org/books/threat-modeling-book)\n \n ### Methodologies\n\nThere are many threat modeling techniques out there, with no one-size-fits-all approach, ranging from very famous ones to deprecated ones. I believe threat modeling is a process that must accomplish our goals and fit our organization. Don't try to wear clothes that don't fit. Hence, I won't mention or cover any specific threat modeling methodologies here. There are vast resources available, and I recommend checking out this [one](https://shellsharks.com/threat-modeling).\n\n### Myths and Misconceptions\n\n>  1. Threat modeling is only for security or developers.\n\nThreat modeling is not only for security professionals or developers. It's a collaborative effort that involves everyone in the development team, from business analysts to developers to security experts. It's not a one-time activity, but a continuous process that should be integrated into the development lifecycle. Our goal is not stop at technical risks, it also includes the operational and business risks.\n\n> 2. Threat modeling is only for large or complex systems.\n\nThreat modeling is not limited to large or complex systems, nor is it restricted to startups or mature organizations. It can be applied to entire projects or even individual components. The key is to identify the system's assets, recognize potential threats, and work on mitigating them.\n\n> 3. Threat modeling is only for the beginning of a project.\n\nThreat modeling is not a one-time activity. It's a continuous process that should be integrated into the development lifecycle. After the initial threat modeling, it's crucial to monitor and update the model as new threats emerge or vulnerabilities are discovered. Additionally, any changes in the system's design or architecture due to business needs should be reflected in the model.\n\n> 4. Threat modeling is only for prevention\n\nThreat modeling is not just for prevention; it can also serve as valuable material for penetration testing or red teaming exercises. By leveraging threat models, internal teams can reduce testing time and uncover more attack vectors efficiently.\n\n### Close Thoughts\n\nThreat modeling is an ongoing process, not a final destination. It is not something you finish and are cheerful about. By expanding the perspective, I think we can see the bigger picture beyond the obvious threats, and gain a better understand the unexpected risks that lie ahead. Let's build more resilient, effective and secure application.","src/content/blog/rethinking-threat-modeling.md",[92,93,94],"@assets/images/threat-meme.png","@assets/images/risk-diagram.png","@assets/images/4-questions.png","1fd26a490507558c",{"html":97,"metadata":98},"\u003Cp>Categories of readers when discussing Threat Modeling:\u003C/p>\n\u003Cul>\n\u003Cli>Never heard of it, no prior knowledge.\u003C/li>\n\u003Cli>Familiar with the concept but not used it in practice.\u003C/li>\n\u003Cli>Experts in the field with extensive experience and deep understanding.\u003C/li>\n\u003C/ul>\n\u003Cp>You will likely see yourself in one of the 3 categories above. No matter which one you fall into, you’re not alone. This post is not tailored to a specific group, and neither an oversimplified introduction nor an in-depth deep dive.\u003C/p>\n\u003Cp>Let’s begin.\u003C/p>\n\u003Cblockquote>\n\u003Cp>I think I can turn this into a series. This post will be the prologue.\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"threat-modeling-tldr-version\">Threat Modeling TLDR version\u003C/h2>\n\u003Cp>Threat Modeling is a broad term and can mean very different things depend on your category.\u003C/p>\n\u003Cp>In practical terms:  Threat modeling is the process of determining which assets are in the system and how we will secure them from the start. This involves analyzing the system’s design to define the assets, brainstorming potential threats, and collaboratively developing mitigation strategies to protect them -> \u003Cspan class=\"accent\"> proactive security\u003C/span>.\u003C/p>\n\u003Cblockquote>\n\u003Cp>It’s all about the risk management!\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/threat-meme.png&#x22;,&#x22;alt&#x22;:&#x22;threat-meme&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch3 id=\"benefits\">Benefits\u003C/h3>\n\u003Cul>\n\u003Cli>Find potential issues early. Enforce the strict and suffiecient rules while increasing risk awareness.\u003C/li>\n\u003Cli>Deliver more secure software. Security is not blocker.\u003C/li>\n\u003Cli>Reduce cost of mitigation\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/risk-diagram.png&#x22;,&#x22;alt&#x22;:&#x22;risk-diagram&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>It’s crucial to understand that threats will always present in our products. Some risks might not seem significant when viewed in isolation. However, when combined with other vulnerabilities or system components, they can create a chain interaction that leads to a serious security threat. Threat modeling helps identify and mitigate these risks early, ensuring a more secure foundation from the start.\u003C/p>\n\u003Cp>Yes, \u003Cspan class=\"accent\"> secure by design\u003C/span>. This term is one of our main goals when doing threat modeling. We cannot be certain that 100% risks will occur or can be predicted. But we believe that the output of threat modeling - a set of potential issues is a good material for pentesting, red teaming exercises, and leads to fewer issues or reduced impact in later phases.\u003C/p>\n\u003Ch3 id=\"threat-modeling-manifesto\">Threat Modeling Manifesto\u003C/h3>\n\u003Cp>The problem lies in the questions themselves, and our solution is to find the right answers. When it comes to threat modeling, Adam Shostack outlines four key questions:\u003C/p>\n\u003Col>\n\u003Cli>What are we working on?\u003C/li>\n\u003Cli>What can go wrong?\u003C/li>\n\u003Cli>What are we going to do about it?\u003C/li>\n\u003Cli>Did we do a good enough job?\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/4-questions.png&#x22;,&#x22;alt&#x22;:&#x22;4-questions&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Check it out on the website and his books\u003C/p>\n\u003Cp>-> \u003Ca href=\"https://www.threatmodelingmanifesto.org\">Threat Modeling Manifesto\u003C/a>,\u003C/p>\n\u003Cp>-> \u003Ca href=\"https://shostack.org/books/threat-modeling-book\">Threat Modeling: Designing for Security\u003C/a>\u003C/p>\n\u003Ch3 id=\"methodologies\">Methodologies\u003C/h3>\n\u003Cp>There are many threat modeling techniques out there, with no one-size-fits-all approach, ranging from very famous ones to deprecated ones. I believe threat modeling is a process that must accomplish our goals and fit our organization. Don’t try to wear clothes that don’t fit. Hence, I won’t mention or cover any specific threat modeling methodologies here. There are vast resources available, and I recommend checking out this \u003Ca href=\"https://shellsharks.com/threat-modeling\">one\u003C/a>.\u003C/p>\n\u003Ch3 id=\"myths-and-misconceptions\">Myths and Misconceptions\u003C/h3>\n\u003Cblockquote>\n\u003Col>\n\u003Cli>Threat modeling is only for security or developers.\u003C/li>\n\u003C/ol>\n\u003C/blockquote>\n\u003Cp>Threat modeling is not only for security professionals or developers. It’s a collaborative effort that involves everyone in the development team, from business analysts to developers to security experts. It’s not a one-time activity, but a continuous process that should be integrated into the development lifecycle. Our goal is not stop at technical risks, it also includes the operational and business risks.\u003C/p>\n\u003Cblockquote>\n\u003Col start=\"2\">\n\u003Cli>Threat modeling is only for large or complex systems.\u003C/li>\n\u003C/ol>\n\u003C/blockquote>\n\u003Cp>Threat modeling is not limited to large or complex systems, nor is it restricted to startups or mature organizations. It can be applied to entire projects or even individual components. The key is to identify the system’s assets, recognize potential threats, and work on mitigating them.\u003C/p>\n\u003Cblockquote>\n\u003Col start=\"3\">\n\u003Cli>Threat modeling is only for the beginning of a project.\u003C/li>\n\u003C/ol>\n\u003C/blockquote>\n\u003Cp>Threat modeling is not a one-time activity. It’s a continuous process that should be integrated into the development lifecycle. After the initial threat modeling, it’s crucial to monitor and update the model as new threats emerge or vulnerabilities are discovered. Additionally, any changes in the system’s design or architecture due to business needs should be reflected in the model.\u003C/p>\n\u003Cblockquote>\n\u003Col start=\"4\">\n\u003Cli>Threat modeling is only for prevention\u003C/li>\n\u003C/ol>\n\u003C/blockquote>\n\u003Cp>Threat modeling is not just for prevention; it can also serve as valuable material for penetration testing or red teaming exercises. By leveraging threat models, internal teams can reduce testing time and uncover more attack vectors efficiently.\u003C/p>\n\u003Ch3 id=\"close-thoughts\">Close Thoughts\u003C/h3>\n\u003Cp>Threat modeling is an ongoing process, not a final destination. It is not something you finish and are cheerful about. By expanding the perspective, I think we can see the bigger picture beyond the obvious threats, and gain a better understand the unexpected risks that lie ahead. Let’s build more resilient, effective and secure application.\u003C/p>",{"headings":99,"localImagePaths":118,"remoteImagePaths":119,"frontmatter":120,"imagePaths":123},[100,103,106,109,112,115],{"depth":38,"slug":101,"text":102},"threat-modeling-tldr-version","Threat Modeling TLDR version",{"depth":42,"slug":104,"text":105},"benefits","Benefits",{"depth":42,"slug":107,"text":108},"threat-modeling-manifesto","Threat Modeling Manifesto",{"depth":42,"slug":110,"text":111},"methodologies","Methodologies",{"depth":42,"slug":113,"text":114},"myths-and-misconceptions","Myths and Misconceptions",{"depth":42,"slug":116,"text":117},"close-thoughts","Close Thoughts",[92,93,94],[],{"title":83,"author":14,"pubDatetime":121,"featured":17,"draft":17,"tags":122,"description":88},["Date","2025-03-10T00:00:00.000Z"],[85,86,87,22],[92,93,94],"rethinking-threat-modeling.md","ios-structure",{"id":125,"data":127,"body":133,"filePath":134,"assetImports":135,"digest":141,"rendered":142,"legacyId":164},{"author":14,"pubDatetime":128,"title":129,"featured":17,"draft":17,"tags":130,"description":132},["Date","2024-10-14T00:00:00.000Z"],"Nailing the basic of IPA structure",[19,20,131,22],"ipa","Breaking down the basics of IPA structure, know what you're testing before you dive in.","When I first started security testing iOS apps, I didn’t really care about diving deep into the details of IPA file. I was more focused on finding vulnerabilities and running basic tests. But that changed when a QA engineer asked me during a mobile security training session: \"What exactly is inside an IPA app?\".\n\nMaybe this blog post will answer her question and serve as a note for myself.\n\n\n## IPA (iOS App Store Package)\n\niOS apps are packaged as IPA files, which are ZIP-compressed archives containing the app's binary, resources, and metadata needed for execution on iOS devices. Similar to Android's APK, IPA files are specific to Apple's iOS devices and are used to install apps on iPhones, iPads, and iPods.\n\n## IPA Structure\n\n| Name      | Description |\n| ----------- | ----------- |\n| iTunesArtwork      | A 512x512 pixel PNG image used as app’s icon that shows up on iTunes, and App Store.|\n| iTunesMetadata.plist | A property list file that contains developer information like developer name, ID, copyright information, application name etc.|\n|META-INF| Subdirectory within the IPA file stores meta-information. Inside, you will find two more files: \u003Cbr> - com.apple.FixedZipMetadata.bin \u003Cbr> - com.apple.ZipMetadata.plist|\n|WatchKitSupport/WK|The framework simplifies app development for watchOS apps, including managing background tasks, extended runtime sessions, Siri intents, and accessing user information about Apple Watch|\n|Payload| Folder that contains the application data.|\n|Application Binary|The executable file containing the application’s code. Same name with actual application name. The complete binary analysis is performed on this application binary.|\n|Mobile Provision file|iOS apps are typically installed via the App Store, but for beta testing or ad hoc distribution, a mobile provisioning profile is included to allow installation on specific devices.\n|Code Signature|Check the integrity of the app when the application was released. Any kind of editing or deletion will invalidate the signature. Any changes that are made to the .app file require that the whole package be re-signed.|\n|Bundled Resource Files|Images, Videos, Sounds, HTML, Property list files, etc. which are required by the application to be installed on the mobile device.|\n\n## Payload: A Closer Look\n\nIn the Payload folder, we have a .app folder representing the app's name. Inside, all app data is stored. \n\nFor example: Spotify app\n![spotify-app](@assets/images/2024-10-15-16-28-06.png)\n\n- Info.plist: Configuration information, such as bundle ID, version number, and application display name\n![info-plist](@assets/images/2024-10-15-16-27-59.png)\n\n- _CodeSignature/CodeResources: includes a plist file that contains a signature, ensuring the integrity of all files in the bundle.\n![codesign](@assets/images/2024-10-15-16-27-51.png)\n\n- Assets.car: A compressed archive is used to store asset files, such as icons.\n\n- Frameworks: contains the app native libraries as .dylib or .framework files\n\n- PlugIns: may contain app extensions as .appex files\n![plugins](@assets/images/2024-10-15-16-27-43.png)\n\n- Multiple .lproj folders represent languages, each containing a Localizable.strings file in XML format for localization. (en.lproj, fr.lproj, etc )\n![lprof](@assets/images/2024-10-15-16-27-34.png)\n\n- *PkgInfo:* The PkgInfo file is an alternate way to specify the type and creator codes of your application or bundle. The contents of the PkgInfo file are the 4-byte package type followed by the 4-byte signature of your application. Thus, for the TextEdit application, whose type is 'APPL' and whose signature is 'ttxt', the file would contain the ASCII string “APPLttxt”.\n\n- *SC_Info:* This folder contains keys which are used for decrypting the app executables. The contents will look like this:\n    - Manifest.plist\n    - Spotify.sinf \n    - Spotify.supf \n    - Spotify.supp\n    - Spotify.supx\nThe .sinf, .supf, .supp, .supx files are used for decrypting, and the Manifest.plist file is used to list all of the relevant .sinf files which are to be used. \n\n- *\u003Cname>.storyboardc/*: contain some information on the layout of specific panels or views in the app. The inclusion of these folders suggests that the app was created with the Interface Builder tool. Several.nib files and an additional Info.plist file can be found in these folders.\n    - Info.plist\n    - 01J-lp-oVM-view-MkI-aN-x20.nib \n    - UIViewController-01J-lp-oVM.nib\n\n## Reference:\n- https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html\n- https://mas.owasp.org/MASTG/0x06a-Platform-Overview/#apps-on-ios","src/content/blog/ios-structure.md",[136,137,138,139,140],"@assets/images/2024-10-15-16-28-06.png","@assets/images/2024-10-15-16-27-59.png","@assets/images/2024-10-15-16-27-51.png","@assets/images/2024-10-15-16-27-43.png","@assets/images/2024-10-15-16-27-34.png","bf919ac0bf1c6963",{"html":143,"metadata":144},"\u003Cp>When I first started security testing iOS apps, I didn’t really care about diving deep into the details of IPA file. I was more focused on finding vulnerabilities and running basic tests. But that changed when a QA engineer asked me during a mobile security training session: “What exactly is inside an IPA app?”.\u003C/p>\n\u003Cp>Maybe this blog post will answer her question and serve as a note for myself.\u003C/p>\n\u003Ch2 id=\"ipa-ios-app-store-package\">IPA (iOS App Store Package)\u003C/h2>\n\u003Cp>iOS apps are packaged as IPA files, which are ZIP-compressed archives containing the app’s binary, resources, and metadata needed for execution on iOS devices. Similar to Android’s APK, IPA files are specific to Apple’s iOS devices and are used to install apps on iPhones, iPads, and iPods.\u003C/p>\n\u003Ch2 id=\"ipa-structure\">IPA Structure\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>iTunesArtwork\u003C/td>\u003Ctd>A 512x512 pixel PNG image used as app’s icon that shows up on iTunes, and App Store.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>iTunesMetadata.plist\u003C/td>\u003Ctd>A property list file that contains developer information like developer name, ID, copyright information, application name etc.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>META-INF\u003C/td>\u003Ctd>Subdirectory within the IPA file stores meta-information. Inside, you will find two more files: \u003Cbr> - com.apple.FixedZipMetadata.bin \u003Cbr> - com.apple.ZipMetadata.plist\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>WatchKitSupport/WK\u003C/td>\u003Ctd>The framework simplifies app development for watchOS apps, including managing background tasks, extended runtime sessions, Siri intents, and accessing user information about Apple Watch\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Payload\u003C/td>\u003Ctd>Folder that contains the application data.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Application Binary\u003C/td>\u003Ctd>The executable file containing the application’s code. Same name with actual application name. The complete binary analysis is performed on this application binary.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Mobile Provision file\u003C/td>\u003Ctd>iOS apps are typically installed via the App Store, but for beta testing or ad hoc distribution, a mobile provisioning profile is included to allow installation on specific devices.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Code Signature\u003C/td>\u003Ctd>Check the integrity of the app when the application was released. Any kind of editing or deletion will invalidate the signature. Any changes that are made to the .app file require that the whole package be re-signed.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Bundled Resource Files\u003C/td>\u003Ctd>Images, Videos, Sounds, HTML, Property list files, etc. which are required by the application to be installed on the mobile device.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"payload-a-closer-look\">Payload: A Closer Look\u003C/h2>\n\u003Cp>In the Payload folder, we have a .app folder representing the app’s name. Inside, all app data is stored.\u003C/p>\n\u003Cp>For example: Spotify app\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-16-28-06.png&#x22;,&#x22;alt&#x22;:&#x22;spotify-app&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Info.plist: Configuration information, such as bundle ID, version number, and application display name\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-16-27-59.png&#x22;,&#x22;alt&#x22;:&#x22;info-plist&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>_CodeSignature/CodeResources: includes a plist file that contains a signature, ensuring the integrity of all files in the bundle.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-16-27-51.png&#x22;,&#x22;alt&#x22;:&#x22;codesign&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Assets.car: A compressed archive is used to store asset files, such as icons.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Frameworks: contains the app native libraries as .dylib or .framework files\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>PlugIns: may contain app extensions as .appex files\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-16-27-43.png&#x22;,&#x22;alt&#x22;:&#x22;plugins&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Multiple .lproj folders represent languages, each containing a Localizable.strings file in XML format for localization. (en.lproj, fr.lproj, etc )\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-16-27-34.png&#x22;,&#x22;alt&#x22;:&#x22;lprof&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cem>PkgInfo:\u003C/em> The PkgInfo file is an alternate way to specify the type and creator codes of your application or bundle. The contents of the PkgInfo file are the 4-byte package type followed by the 4-byte signature of your application. Thus, for the TextEdit application, whose type is ‘APPL’ and whose signature is ‘ttxt’, the file would contain the ASCII string “APPLttxt”.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cem>SC_Info:\u003C/em> This folder contains keys which are used for decrypting the app executables. The contents will look like this:\u003C/p>\n\u003Cul>\n\u003Cli>Manifest.plist\u003C/li>\n\u003Cli>Spotify.sinf\u003C/li>\n\u003Cli>Spotify.supf\u003C/li>\n\u003Cli>Spotify.supp\u003C/li>\n\u003Cli>Spotify.supx\nThe .sinf, .supf, .supp, .supx files are used for decrypting, and the Manifest.plist file is used to list all of the relevant .sinf files which are to be used.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cem>\u003Cname>.storyboardc/\u003C/name>\u003C/em>: contain some information on the layout of specific panels or views in the app. The inclusion of these folders suggests that the app was created with the Interface Builder tool. Several.nib files and an additional Info.plist file can be found in these folders.\u003C/p>\n\u003Cul>\n\u003Cli>Info.plist\u003C/li>\n\u003Cli>01J-lp-oVM-view-MkI-aN-x20.nib\u003C/li>\n\u003Cli>UIViewController-01J-lp-oVM.nib\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"reference\">Reference:\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html\">https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://mas.owasp.org/MASTG/0x06a-Platform-Overview/#apps-on-ios\">https://mas.owasp.org/MASTG/0x06a-Platform-Overview/#apps-on-ios\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":145,"localImagePaths":158,"remoteImagePaths":159,"frontmatter":160,"imagePaths":163},[146,149,152,155],{"depth":38,"slug":147,"text":148},"ipa-ios-app-store-package","IPA (iOS App Store Package)",{"depth":38,"slug":150,"text":151},"ipa-structure","IPA Structure",{"depth":38,"slug":153,"text":154},"payload-a-closer-look","Payload: A Closer Look",{"depth":38,"slug":156,"text":157},"reference","Reference:",[136,137,138,139,140],[],{"title":129,"author":14,"pubDatetime":161,"featured":17,"draft":17,"tags":162,"description":132},["Date","2024-10-14T00:00:00.000Z"],[19,20,131,22],[136,137,138,139,140],"ios-structure.md","hard-coded-scanning",{"id":165,"data":167,"body":173,"filePath":174,"assetImports":175,"digest":178,"rendered":179,"legacyId":217},{"author":14,"pubDatetime":168,"title":169,"featured":17,"draft":17,"tags":170,"description":172},["Date","2025-03-13T00:00:00.000Z"],"Secure Your Codebase Secrets Scanning",[171,86,87,22],"secrets scanning","Think about managing the risks of hard coded secrets.","## The Backstage\n\nIf secrets are so sensitive, why do developers still hard code them in the codebase? It's not because they aren't concerned about security, they understand the risks of exposed secrets. But real world development is messy and often siloed, filled with challenges that make security an afterthought. We all have deep respect for our developers, they're incredibly smart and deeply knowledgeable about their code. Deadlines are tight, so many features are in the queue, debugging needs to be fast, and occasionally, developers just need to get things done. Security extra steps will be in the backlog with the seatbelt *\"Will remove later\"*.\n\n![sleep-meme](@assets/images/sleep-meme.png)\n\n## It's not a bug, it's human nature\n\nDevelopers are wired to solve problems efficiently. Hard coding a secret might feel like the simplest way to keep things moving. It happens for a few key reasons:\n\n#### \u003Cspan class=\"accent\">A false sense of security\u003C/span>\n- *\"It's just an internal repo\"*\n- *\"Only our team has access\"*\n- *\"It's buried deep in code, no one will find it\"*\n\nThese assumptions feel reasonable until they're not. Internal repos can get exposed. Access controls can be broken. Your VCS environment can leak out. That AWS key you hard coded for convenience? It's one leaked commit away from becoming a security nightmare.\n\n#### \u003Cspan class=\"accent\">Speed versus Security \u003C/span>\n\nHard coding secrets makes things work now. And in a fast moving development cycle, \"now\" often wins.\n- Rapid prototyping? Just drop in an API key.\n- Debugging an issue? Hard coded credentials to test faster.\n- Collaborating with teammates? Share keys in the code.\n\t\t\nIt's always meant to be temporary, until it isn't.\n\n#### \u003Cspan class=\"accent\">The unintentional mistake\u003C/span>\n\nNot all hard coded secrets are intentional. Sometimes they sneak in:\n\n- Test credentials get left in the final commit.\n- Copied snippet from Stack Overflow or AI generated includes an embedded key.\n- A .gitignore rule is misconfigured, and a sensitive file gets pushed.\n\nNo one means to leak secrets. But when security relies on remembering an extra step, mistakes happen. A secret that was meant to be removed later gets forgotten. A piece of test code accidentally makes it into production. A private repository becomes public. And suddenly, what seemed like a harmless decision turns into a security incident. \n\n## The Real Cost of Leaked Secrets\n\nThe worst part? We don't see the cost of a secret leak until it's leaked. Maybe nothing happens, until a hacker stumbles upon it, a service revokes your key, or an entire system is compromised.\n\nHard coding secrets isn't just a bad habit. It's a risk that grows silently until it [explodes](https://www.ibm.com/reports/data-breach).\n\n### How Do We Catch This?\n\nWe don't just enforce security, we work _with_ developers, not against them. Security should integrate smoothly into the their daily SDLC which called AppSec processes without slowing teams down.\n\n#### A Real World Example\n\nLet's say we're working at a **blitzscaling startup**, where the product is developing at lightning speed to hit MVP and keep up with agile demands. The focus is on shipping fast , not security\n\n- **Cost is minimal** : there’s no budget for fancy security tools like commercial SAST tools\n- **GitLab is self-hosted** : no built-in  security scanning.\n- **Developer habits** : secrets, API keys, and credentials are often committed directly to the code because it's “internal.”\n\nWithout expensive tools, we try to bake open source tool called Gitleaks into our CI/CD pipeline. We chose this for its customizable regex rules and speed. Here's what we propose with goals rolling our scanning at scale.\n\nIn GitLab, each project has its own **`.gitlab-ci.yml`** file, defining its CI/CD pipeline. But managing security scans **project by project** doesn't scale well. We would need to manually add and update security rules in every repo, not happening.\n\nInstead, we **leverage pipeline includes**. This works like importing a library in code: we define a **centralized security pipeline** in a dedicated repo and then include it in every project's **`.gitlab-ci.yml`**.\n\n![gitleaks-diagram](@assets/images/gitleaks-diagram.png)\n\nHow it works:\n- Centralized Repo: We already have a dedicated repo maintained by **DevOps team**, defining general security policies. In this repo, we create a **security config template** that includes customized rules (keep reference copy in S3 bucket) \n- Each working repo includes the centralized **security pipeline**\n- **Scan results (artifacts)** are automatically **uploaded to S3** for investigation\n\nHere is the sample of gitleaks-ci.yml\n```yaml\nstages:\n  - secret-detection\n\n.gitleaks-rules: &gitleaks-rules\n  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\n  stage: secret-detection\n  tags:\n    - share-nonprod\n  script:\n    - aws s3 cp s3://share//gitlab-ci/security/gitleaks-rules.toml \"$CI_PROJECT_DIR\"/gitleaks-rules.toml\n  artifacts:\n    paths:\n      - gitleaks-rules.toml\n\n.gitleaks-scan: &gitleaks-scan\n  image:\n    name: path/dev-gitleaks:latest\n    entrypoint: [\"\"]\n  stage: secret-detection\n \n  tags:\n    - share-nonprod\n  needs: []\n  variables:\n    GIT_DEPTH: 0\n  before_script:\n    - git config --global --add safe.directory \"${CI_PROJECT_DIR}\"\n  script:\n    - gitleaks detect --config gitleaks-rules.toml ${TRACE+--log-level debug} --report-path gitleaks.output.json\n  artifacts:\n    name: \"$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG $CI_COMMIT_SHORT_SHA\"\n    when: always\n    paths:\n      - gitleaks.*\n\n.gitleaks-output-upload-to-s3: &gitleaks-output-upload-to-s3\n  stage: secret-detection\n  tags:\n    - share-nonprod\n  needs:\n    - gitleaks-scan\n  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\n  script:\n    - aws s3 cp gitleaks.* s3://secret-scan/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH/\n    - echo \"uploaded successful\"\n```\n## Final thoughts\nAter detecting the secrets, simply deleting a secret from the latest commit **does not mean it's gone**, it's already in history, caches, forks, and clones. Attackers and automated tools can still find and exploit it.\n\nSome next moves: \n- Use centralized secret manager like **AWS Secrets Manager, HashiCorp Vault, or Doppler** \n- Enforce pre-commit with gitleaks to catch secrets before dev commits\n- Security Awareness, work with them, and educate your teams\n- Rotate and monitor secret","src/content/blog/hard-coded-scanning.md",[176,177],"@assets/images/sleep-meme.png","@assets/images/gitleaks-diagram.png","b98ffa621ba2d4e1",{"html":180,"metadata":181},"\u003Ch2 id=\"the-backstage\">The Backstage\u003C/h2>\n\u003Cp>If secrets are so sensitive, why do developers still hard code them in the codebase? It’s not because they aren’t concerned about security, they understand the risks of exposed secrets. But real world development is messy and often siloed, filled with challenges that make security an afterthought. We all have deep respect for our developers, they’re incredibly smart and deeply knowledgeable about their code. Deadlines are tight, so many features are in the queue, debugging needs to be fast, and occasionally, developers just need to get things done. Security extra steps will be in the backlog with the seatbelt \u003Cem>“Will remove later”\u003C/em>.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/sleep-meme.png&#x22;,&#x22;alt&#x22;:&#x22;sleep-meme&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"its-not-a-bug-its-human-nature\">It’s not a bug, it’s human nature\u003C/h2>\n\u003Cp>Developers are wired to solve problems efficiently. Hard coding a secret might feel like the simplest way to keep things moving. It happens for a few key reasons:\u003C/p>\n\u003Ch4 id=\"a-false-sense-of-security\">\u003Cspan class=\"accent\">A false sense of security\u003C/span>\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cem>“It’s just an internal repo”\u003C/em>\u003C/li>\n\u003Cli>\u003Cem>“Only our team has access”\u003C/em>\u003C/li>\n\u003Cli>\u003Cem>“It’s buried deep in code, no one will find it”\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>These assumptions feel reasonable until they’re not. Internal repos can get exposed. Access controls can be broken. Your VCS environment can leak out. That AWS key you hard coded for convenience? It’s one leaked commit away from becoming a security nightmare.\u003C/p>\n\u003Ch4 id=\"speed-versus-security\">\u003Cspan class=\"accent\">Speed versus Security \u003C/span>\u003C/h4>\n\u003Cp>Hard coding secrets makes things work now. And in a fast moving development cycle, “now” often wins.\u003C/p>\n\u003Cul>\n\u003Cli>Rapid prototyping? Just drop in an API key.\u003C/li>\n\u003Cli>Debugging an issue? Hard coded credentials to test faster.\u003C/li>\n\u003Cli>Collaborating with teammates? Share keys in the code.\u003C/li>\n\u003C/ul>\n\u003Cp>It’s always meant to be temporary, until it isn’t.\u003C/p>\n\u003Ch4 id=\"the-unintentional-mistake\">\u003Cspan class=\"accent\">The unintentional mistake\u003C/span>\u003C/h4>\n\u003Cp>Not all hard coded secrets are intentional. Sometimes they sneak in:\u003C/p>\n\u003Cul>\n\u003Cli>Test credentials get left in the final commit.\u003C/li>\n\u003Cli>Copied snippet from Stack Overflow or AI generated includes an embedded key.\u003C/li>\n\u003Cli>A .gitignore rule is misconfigured, and a sensitive file gets pushed.\u003C/li>\n\u003C/ul>\n\u003Cp>No one means to leak secrets. But when security relies on remembering an extra step, mistakes happen. A secret that was meant to be removed later gets forgotten. A piece of test code accidentally makes it into production. A private repository becomes public. And suddenly, what seemed like a harmless decision turns into a security incident.\u003C/p>\n\u003Ch2 id=\"the-real-cost-of-leaked-secrets\">The Real Cost of Leaked Secrets\u003C/h2>\n\u003Cp>The worst part? We don’t see the cost of a secret leak until it’s leaked. Maybe nothing happens, until a hacker stumbles upon it, a service revokes your key, or an entire system is compromised.\u003C/p>\n\u003Cp>Hard coding secrets isn’t just a bad habit. It’s a risk that grows silently until it \u003Ca href=\"https://www.ibm.com/reports/data-breach\">explodes\u003C/a>.\u003C/p>\n\u003Ch3 id=\"how-do-we-catch-this\">How Do We Catch This?\u003C/h3>\n\u003Cp>We don’t just enforce security, we work \u003Cem>with\u003C/em> developers, not against them. Security should integrate smoothly into the their daily SDLC which called AppSec processes without slowing teams down.\u003C/p>\n\u003Ch4 id=\"a-real-world-example\">A Real World Example\u003C/h4>\n\u003Cp>Let’s say we’re working at a \u003Cstrong>blitzscaling startup\u003C/strong>, where the product is developing at lightning speed to hit MVP and keep up with agile demands. The focus is on shipping fast , not security\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Cost is minimal\u003C/strong> : there’s no budget for fancy security tools like commercial SAST tools\u003C/li>\n\u003Cli>\u003Cstrong>GitLab is self-hosted\u003C/strong> : no built-in  security scanning.\u003C/li>\n\u003Cli>\u003Cstrong>Developer habits\u003C/strong> : secrets, API keys, and credentials are often committed directly to the code because it’s “internal.”\u003C/li>\n\u003C/ul>\n\u003Cp>Without expensive tools, we try to bake open source tool called Gitleaks into our CI/CD pipeline. We chose this for its customizable regex rules and speed. Here’s what we propose with goals rolling our scanning at scale.\u003C/p>\n\u003Cp>In GitLab, each project has its own \u003Cstrong>\u003Ccode>.gitlab-ci.yml\u003C/code>\u003C/strong> file, defining its CI/CD pipeline. But managing security scans \u003Cstrong>project by project\u003C/strong> doesn’t scale well. We would need to manually add and update security rules in every repo, not happening.\u003C/p>\n\u003Cp>Instead, we \u003Cstrong>leverage pipeline includes\u003C/strong>. This works like importing a library in code: we define a \u003Cstrong>centralized security pipeline\u003C/strong> in a dedicated repo and then include it in every project’s \u003Cstrong>\u003Ccode>.gitlab-ci.yml\u003C/code>\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/gitleaks-diagram.png&#x22;,&#x22;alt&#x22;:&#x22;gitleaks-diagram&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>How it works:\u003C/p>\n\u003Cul>\n\u003Cli>Centralized Repo: We already have a dedicated repo maintained by \u003Cstrong>DevOps team\u003C/strong>, defining general security policies. In this repo, we create a \u003Cstrong>security config template\u003C/strong> that includes customized rules (keep reference copy in S3 bucket)\u003C/li>\n\u003Cli>Each working repo includes the centralized \u003Cstrong>security pipeline\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Scan results (artifacts)\u003C/strong> are automatically \u003Cstrong>uploaded to S3\u003C/strong> for investigation\u003C/li>\n\u003C/ul>\n\u003Cp>Here is the sample of gitleaks-ci.yml\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">stages\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">  - \u003C/span>\u003Cspan style=\"color:#98C379\">secret-detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">.gitleaks-rules\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#C678DD\">&#x26;\u003C/span>\u003Cspan style=\"color:#E5C07B\">gitleaks-rules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  image\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  stage\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">secret-detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  tags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">share-nonprod\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  script\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">aws s3 cp s3://share//gitlab-ci/security/gitleaks-rules.toml \"$CI_PROJECT_DIR\"/gitleaks-rules.toml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  artifacts\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    paths\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">      - \u003C/span>\u003Cspan style=\"color:#98C379\">gitleaks-rules.toml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">.gitleaks-scan\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#C678DD\">&#x26;\u003C/span>\u003Cspan style=\"color:#E5C07B\">gitleaks-scan\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  image\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">path/dev-gitleaks:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    entrypoint\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: [\u003C/span>\u003Cspan style=\"color:#98C379\">\"\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  stage\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">secret-detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  tags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">share-nonprod\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  needs\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  variables\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    GIT_DEPTH\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  before_script\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">git config --global --add safe.directory \"${CI_PROJECT_DIR}\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  script\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">gitleaks detect --config gitleaks-rules.toml ${TRACE+--log-level debug} --report-path gitleaks.output.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  artifacts\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">\"$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG $CI_COMMIT_SHORT_SHA\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    when\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">always\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    paths\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">      - \u003C/span>\u003Cspan style=\"color:#98C379\">gitleaks.*\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">.gitleaks-output-upload-to-s3\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#C678DD\">&#x26;\u003C/span>\u003Cspan style=\"color:#E5C07B\">gitleaks-output-upload-to-s3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  stage\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">secret-detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  tags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">share-nonprod\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  needs\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">gitleaks-scan\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  image\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#98C379\">registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">  script\u003C/span>\u003Cspan style=\"color:#ABB2BF\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">aws s3 cp gitleaks.* s3://secret-scan/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    - \u003C/span>\u003Cspan style=\"color:#98C379\">echo \"uploaded successful\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"final-thoughts\">Final thoughts\u003C/h2>\n\u003Cp>Ater detecting the secrets, simply deleting a secret from the latest commit \u003Cstrong>does not mean it’s gone\u003C/strong>, it’s already in history, caches, forks, and clones. Attackers and automated tools can still find and exploit it.\u003C/p>\n\u003Cp>Some next moves:\u003C/p>\n\u003Cul>\n\u003Cli>Use centralized secret manager like \u003Cstrong>AWS Secrets Manager, HashiCorp Vault, or Doppler\u003C/strong>\u003C/li>\n\u003Cli>Enforce pre-commit with gitleaks to catch secrets before dev commits\u003C/li>\n\u003Cli>Security Awareness, work with them, and educate your teams\u003C/li>\n\u003Cli>Rotate and monitor secret\u003C/li>\n\u003C/ul>",{"headings":182,"localImagePaths":211,"remoteImagePaths":212,"frontmatter":213,"imagePaths":216},[183,186,189,193,196,199,202,205,208],{"depth":38,"slug":184,"text":185},"the-backstage","The Backstage",{"depth":38,"slug":187,"text":188},"its-not-a-bug-its-human-nature","It’s not a bug, it’s human nature",{"depth":190,"slug":191,"text":192},4,"a-false-sense-of-security","A false sense of security",{"depth":190,"slug":194,"text":195},"speed-versus-security","Speed versus Security ",{"depth":190,"slug":197,"text":198},"the-unintentional-mistake","The unintentional mistake",{"depth":38,"slug":200,"text":201},"the-real-cost-of-leaked-secrets","The Real Cost of Leaked Secrets",{"depth":42,"slug":203,"text":204},"how-do-we-catch-this","How Do We Catch This?",{"depth":190,"slug":206,"text":207},"a-real-world-example","A Real World Example",{"depth":38,"slug":209,"text":210},"final-thoughts","Final thoughts",[176,177],[],{"title":169,"author":14,"pubDatetime":214,"featured":17,"draft":17,"tags":215,"description":172},["Date","2025-03-13T00:00:00.000Z"],[171,86,87,22],[176,177],"hard-coded-scanning.md","telegram-bot-newsletter",{"id":218,"data":220,"body":229,"filePath":230,"assetImports":231,"digest":235,"rendered":236,"legacyId":264},{"author":14,"pubDatetime":221,"title":222,"featured":17,"draft":17,"tags":223,"description":228},["Date","2024-11-15T00:00:00.000Z"],"Lifelong Learning - Centralizing own Newsletters",[224,225,22,226,227],"newsletter","productivity","telegram","TIL","TIL: Learn how I stay up-to-date with tech and what resources I used to grow to.","The Internet is flooded with content, materials, and resources. It's tough to find the most useful newsletters, blogs, creators while keeping everything centralized, simple, and minimal. \n\nIn this article, I want to share how I stay up-to-date on the future of learning and work. Each resource on this list has taught me something new and helped me grow as a lifelong learner.\n\n\n### \u003Cspan class=\"accent\">Context\u003C/span>\nBeing in cybersecurity, I need to keep up with the industry trends, latest threats, libraries, tools, vulnerabilities, etc, so that I can apply this knowledge at my job.\n\n### \u003Cspan class=\"accent\">Complication\u003C/span>\n\nThe first challenge I encountered was information overload. The cybersecurity landscape is continuously changing, with new vulnerabilities and attacks being popping up daily. While I understood the value of remaining informed, the sheer amount of information made it overwhelming to keep up. \n\nHere’s a quick rundown of the challenges I faced:\n\n- Time drain: I spent hours hopping between websites and blogs, manually scanning headlines for useful updates.\n- Missed stuff: Important updates slipped through the cracks because the info was scattered all over the place.\n- Lack of organization: Keeping track of security updates was a mess since they were spread across so many channels.\n\n### \u003Cspan class=\"accent\">Resolution\u003C/span>\n\n#### 1. Traditional Way: Email Notifications\nThe first thing I tried was setting up email notifications for the blogs, newsletters, and other resources I follow. Many security websites and blogs offer the option to receive email updates whenever they post something new.\n\n- Email Subscriptions: I could subscribe to email newsletters or set up alerts for specific security topics or sources.\n- Daily Digest: Most platforms offer daily or weekly email summaries of the latest posts, making it easier to stay in the loop without constantly checking websites.\n\n![email-sub](@assets/images/tldr-sub.png)\n\nThis has its pros and cons. It’s straightforward and helps me get things done much faster, but it does have some drawbacks:\n\n- Clutter: My inbox would quickly get flooded with emails from various sources, making it tough to sift through and find the important ones.\n- Limited Control: Email services often lack fine-grained control over what content I receive and when, leading to less customization.\n\n![email-noti](@assets/images/tldr-email.png)\n\n#### 2. Telegram Bot. \n\nThe second, and I think much better is using a bot to automatically send notifications from my curated list of resources. Telegram is my favorite tool and one I use daily, so it make perfect sense to make it a platform for my knowledge hub.\n\nHere's how it setup:\n\n1. Create a Telegram bot via [BotFather](https://t.me/botfather)\n2. Using [RSStT](https://github.com/Rongronggg9/RSS-to-Telegram-Bot).\n\nAlternative: https://www.newskeeper.io/\n\n3. Create a channel or group to distribute the news. Then, add the RSStT bot as a member and grant it admin privileges to ensure it can post messages in the channel or group.\n\n**Usage of RSStT**:\n- **/sub**: Subscribe\n- **/unsub**: Unsubscribe\n- **/unsub_all**: Unsubscribe from all subscriptions\n- **/list**: Check the subscription list\n- **/set**: Customize subscriptions\n- **/set_default**: Customize default settings\n- **/import**: Import subscriptions from an OPML file\n- **/export**: Export subscriptions to an OPML file\n- **/activate_subs**: Activate subscriptions\n- **/deactivate_subs**: Deactivate subscriptions\n- **/version**: Check the bot version\n- **/help**: View help\n\nHere are some of the security resources I follow\n\n| Site                                                                          | Feed URL                                     |\n| ------------------------------------------------------------------------------| -------------------------------------------- |\n| [Resilient Cyber](https://www.resilientcyber.io/ )                            | https://www.resilientcyber.io/feed           |\n| [The Software Analyst Cyber Research](https://softwareanalyst.substack.com/)  | https://softwareanalyst.substack.com/feed    |       \n| [better appsec - Medium](https://betterappsec.com/ )                          | https://betterappsec.com/feed                |                     \n| [Reasonable Application Security](https://appsec.beehiiv.com/)                | https://rss.beehiiv.com/feeds/qzqvvIt0tM.xml |\n| [tl;dr sec](ttps://tldrsec.com/)                                              | https://rss.beehiiv.com/feeds/xgTKUmMmUm.xml |\n| [API Security News](https://apisecurity.io/)                                  | https://apisecurity.io/feed/index.xml        |\n| [Latio Pulse](https://pulse.latio.tech/)                                      | https://pulse.latio.tech/feed                |\n| [The Cybersecurity Pulse (TCP)]( https://www.cybersecuritypulse.net/)         | https://www.cybersecuritypulse.net/feed      |\n| [The Hacker News](https://thehackernews.com )                                 | https://feeds.feedburner.com/TheHackersNews  |\n| [Return On Security](https://www.returnonsecurity.com/t/Newsletter)           | https://rss.beehiiv.com/feeds/tLSvUYOBwf.xml |\n| [Vulnerable U](https://www.vulnu.com/ )                                       | https://rss.beehiiv.com/feeds/lSfumbrEGk.xml |\n| [Secure All Software](https://www.secureallsoftware.com/)                     | https://www.secureallsoftware.com/feed       |\n| [CSO Online](https://www.csoonline.com/)                                      | https://www.csoonline.com/feed/              |\n| [AWS Security Blog](https://aws.amazon.com/blogs/security/)                   | https://aws.amazon.com/blogs/security/feed/  |\n| [CramHacks](https://www.cramhacks.com/)                                       | https://rss.beehiiv.com/feeds/uGY9n2H0Mg.xml |\n\n\nIn this channel, paste the bellow command\n```bash\n/sub \u003Cabove_RSS_list>\n/activate_subs\n```\n\n#### \u003Cspan class=\"accent\">The Result\u003C/span>\nNow, I have a fully automated system that delivers real-time security updates directly to my Telegram channel, eliminating the need to manually check websites or emails. The Telegram bot streamlines everything, ensuring I never miss an important security update. This setup has significantly improved my efficiency and keeps me constantly informed about the latest cybersecurity news.\n\n\u003Cspan class=\"accent\">If you're interested with my channel. You can find and follow it [here](https://t.me/tldrsecurity).\u003C/span>\n\nThanks for reading!\n\n![tldr-telegram](@assets/images/tldr-telegram.png)","src/content/blog/telegram-bot-newsletter.md",[232,233,234],"@assets/images/tldr-sub.png","@assets/images/tldr-email.png","@assets/images/tldr-telegram.png","db6b3e54adfa18ef",{"html":237,"metadata":238},"\u003Cp>The Internet is flooded with content, materials, and resources. It’s tough to find the most useful newsletters, blogs, creators while keeping everything centralized, simple, and minimal.\u003C/p>\n\u003Cp>In this article, I want to share how I stay up-to-date on the future of learning and work. Each resource on this list has taught me something new and helped me grow as a lifelong learner.\u003C/p>\n\u003Ch3 id=\"context\">\u003Cspan class=\"accent\">Context\u003C/span>\u003C/h3>\n\u003Cp>Being in cybersecurity, I need to keep up with the industry trends, latest threats, libraries, tools, vulnerabilities, etc, so that I can apply this knowledge at my job.\u003C/p>\n\u003Ch3 id=\"complication\">\u003Cspan class=\"accent\">Complication\u003C/span>\u003C/h3>\n\u003Cp>The first challenge I encountered was information overload. The cybersecurity landscape is continuously changing, with new vulnerabilities and attacks being popping up daily. While I understood the value of remaining informed, the sheer amount of information made it overwhelming to keep up.\u003C/p>\n\u003Cp>Here’s a quick rundown of the challenges I faced:\u003C/p>\n\u003Cul>\n\u003Cli>Time drain: I spent hours hopping between websites and blogs, manually scanning headlines for useful updates.\u003C/li>\n\u003Cli>Missed stuff: Important updates slipped through the cracks because the info was scattered all over the place.\u003C/li>\n\u003Cli>Lack of organization: Keeping track of security updates was a mess since they were spread across so many channels.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"resolution\">\u003Cspan class=\"accent\">Resolution\u003C/span>\u003C/h3>\n\u003Ch4 id=\"1-traditional-way-email-notifications\">1. Traditional Way: Email Notifications\u003C/h4>\n\u003Cp>The first thing I tried was setting up email notifications for the blogs, newsletters, and other resources I follow. Many security websites and blogs offer the option to receive email updates whenever they post something new.\u003C/p>\n\u003Cul>\n\u003Cli>Email Subscriptions: I could subscribe to email newsletters or set up alerts for specific security topics or sources.\u003C/li>\n\u003Cli>Daily Digest: Most platforms offer daily or weekly email summaries of the latest posts, making it easier to stay in the loop without constantly checking websites.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/tldr-sub.png&#x22;,&#x22;alt&#x22;:&#x22;email-sub&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This has its pros and cons. It’s straightforward and helps me get things done much faster, but it does have some drawbacks:\u003C/p>\n\u003Cul>\n\u003Cli>Clutter: My inbox would quickly get flooded with emails from various sources, making it tough to sift through and find the important ones.\u003C/li>\n\u003Cli>Limited Control: Email services often lack fine-grained control over what content I receive and when, leading to less customization.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/tldr-email.png&#x22;,&#x22;alt&#x22;:&#x22;email-noti&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch4 id=\"2-telegram-bot\">2. Telegram Bot.\u003C/h4>\n\u003Cp>The second, and I think much better is using a bot to automatically send notifications from my curated list of resources. Telegram is my favorite tool and one I use daily, so it make perfect sense to make it a platform for my knowledge hub.\u003C/p>\n\u003Cp>Here’s how it setup:\u003C/p>\n\u003Col>\n\u003Cli>Create a Telegram bot via \u003Ca href=\"https://t.me/botfather\">BotFather\u003C/a>\u003C/li>\n\u003Cli>Using \u003Ca href=\"https://github.com/Rongronggg9/RSS-to-Telegram-Bot\">RSStT\u003C/a>.\u003C/li>\n\u003C/ol>\n\u003Cp>Alternative: \u003Ca href=\"https://www.newskeeper.io/\">https://www.newskeeper.io/\u003C/a>\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>Create a channel or group to distribute the news. Then, add the RSStT bot as a member and grant it admin privileges to ensure it can post messages in the channel or group.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Usage of RSStT\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>/sub\u003C/strong>: Subscribe\u003C/li>\n\u003Cli>\u003Cstrong>/unsub\u003C/strong>: Unsubscribe\u003C/li>\n\u003Cli>\u003Cstrong>/unsub_all\u003C/strong>: Unsubscribe from all subscriptions\u003C/li>\n\u003Cli>\u003Cstrong>/list\u003C/strong>: Check the subscription list\u003C/li>\n\u003Cli>\u003Cstrong>/set\u003C/strong>: Customize subscriptions\u003C/li>\n\u003Cli>\u003Cstrong>/set_default\u003C/strong>: Customize default settings\u003C/li>\n\u003Cli>\u003Cstrong>/import\u003C/strong>: Import subscriptions from an OPML file\u003C/li>\n\u003Cli>\u003Cstrong>/export\u003C/strong>: Export subscriptions to an OPML file\u003C/li>\n\u003Cli>\u003Cstrong>/activate_subs\u003C/strong>: Activate subscriptions\u003C/li>\n\u003Cli>\u003Cstrong>/deactivate_subs\u003C/strong>: Deactivate subscriptions\u003C/li>\n\u003Cli>\u003Cstrong>/version\u003C/strong>: Check the bot version\u003C/li>\n\u003Cli>\u003Cstrong>/help\u003C/strong>: View help\u003C/li>\n\u003C/ul>\n\u003Cp>Here are some of the security resources I follow\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Site\u003C/th>\u003Cth>Feed URL\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.resilientcyber.io/\">Resilient Cyber\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://www.resilientcyber.io/feed\">https://www.resilientcyber.io/feed\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://softwareanalyst.substack.com/\">The Software Analyst Cyber Research\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://softwareanalyst.substack.com/feed\">https://softwareanalyst.substack.com/feed\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://betterappsec.com/\">better appsec - Medium\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://betterappsec.com/feed\">https://betterappsec.com/feed\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://appsec.beehiiv.com/\">Reasonable Application Security\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://rss.beehiiv.com/feeds/qzqvvIt0tM.xml\">https://rss.beehiiv.com/feeds/qzqvvIt0tM.xml\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"ttps://tldrsec.com/\">tl;dr sec\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://rss.beehiiv.com/feeds/xgTKUmMmUm.xml\">https://rss.beehiiv.com/feeds/xgTKUmMmUm.xml\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://apisecurity.io/\">API Security News\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://apisecurity.io/feed/index.xml\">https://apisecurity.io/feed/index.xml\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://pulse.latio.tech/\">Latio Pulse\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://pulse.latio.tech/feed\">https://pulse.latio.tech/feed\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.cybersecuritypulse.net/\">The Cybersecurity Pulse (TCP)\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://www.cybersecuritypulse.net/feed\">https://www.cybersecuritypulse.net/feed\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://thehackernews.com\">The Hacker News\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://feeds.feedburner.com/TheHackersNews\">https://feeds.feedburner.com/TheHackersNews\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.returnonsecurity.com/t/Newsletter\">Return On Security\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://rss.beehiiv.com/feeds/tLSvUYOBwf.xml\">https://rss.beehiiv.com/feeds/tLSvUYOBwf.xml\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.vulnu.com/\">Vulnerable U\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://rss.beehiiv.com/feeds/lSfumbrEGk.xml\">https://rss.beehiiv.com/feeds/lSfumbrEGk.xml\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.secureallsoftware.com/\">Secure All Software\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://www.secureallsoftware.com/feed\">https://www.secureallsoftware.com/feed\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.csoonline.com/\">CSO Online\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://www.csoonline.com/feed/\">https://www.csoonline.com/feed/\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://aws.amazon.com/blogs/security/\">AWS Security Blog\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://aws.amazon.com/blogs/security/feed/\">https://aws.amazon.com/blogs/security/feed/\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://www.cramhacks.com/\">CramHacks\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://rss.beehiiv.com/feeds/uGY9n2H0Mg.xml\">https://rss.beehiiv.com/feeds/uGY9n2H0Mg.xml\u003C/a>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>In this channel, paste the bellow command\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">/sub\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#98C379\">above_RSS_lis\u003C/span>\u003Cspan style=\"color:#ABB2BF\">t>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">/activate_subs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"the-result\">\u003Cspan class=\"accent\">The Result\u003C/span>\u003C/h4>\n\u003Cp>Now, I have a fully automated system that delivers real-time security updates directly to my Telegram channel, eliminating the need to manually check websites or emails. The Telegram bot streamlines everything, ensuring I never miss an important security update. This setup has significantly improved my efficiency and keeps me constantly informed about the latest cybersecurity news.\u003C/p>\n\u003Cp>\u003Cspan class=\"accent\">If you’re interested with my channel. You can find and follow it \u003Ca href=\"https://t.me/tldrsecurity\">here\u003C/a>.\u003C/span>\u003C/p>\n\u003Cp>Thanks for reading!\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/tldr-telegram.png&#x22;,&#x22;alt&#x22;:&#x22;tldr-telegram&#x22;,&#x22;index&#x22;:0}\">\u003C/p>",{"headings":239,"localImagePaths":258,"remoteImagePaths":259,"frontmatter":260,"imagePaths":263},[240,243,246,249,252,255],{"depth":42,"slug":241,"text":242},"context","Context",{"depth":42,"slug":244,"text":245},"complication","Complication",{"depth":42,"slug":247,"text":248},"resolution","Resolution",{"depth":190,"slug":250,"text":251},"1-traditional-way-email-notifications","1. Traditional Way: Email Notifications",{"depth":190,"slug":253,"text":254},"2-telegram-bot","2. Telegram Bot.",{"depth":190,"slug":256,"text":257},"the-result","The Result",[232,233,234],[],{"title":222,"author":14,"pubDatetime":261,"featured":17,"draft":17,"tags":262,"description":228},["Date","2024-11-15T00:00:00.000Z"],[224,225,22,226,227],[232,233,234],"telegram-bot-newsletter.md","acquiring-ipa",{"id":265,"data":267,"body":273,"filePath":274,"assetImports":275,"digest":277,"rendered":278,"legacyId":300},{"author":14,"pubDatetime":268,"title":269,"featured":17,"draft":17,"tags":270,"description":272},["Date","2024-05-02T00:00:00.000Z"],"How to Acquiring IPA File",[19,20,271,22],"IPA","The title says it all.","#### TL;DR:\nIn a straightforward way, I'll tell you a secret to obtaining IPA files the right way: \"Ask your mobile developer\".\n\n*Joke, but true.*\n\nIn mobile security audits, clients and developers usually hand over the IPA file directly. They might email it to you or provide access through development-focused distribution channels like TestFlight or Visual Studio App Center.\n\nBut if you're working on your own side project and the app is only available on the App Store, you'll need to explore alternative ways to acquire the IPA:\n\n> https://github.com/majd/ipatool\n\n### Installation: \n\nVia Homebrew\n\n``` shell\n$ brew tap majd/repo\n$ brew install ipatool\n```\n### Usage:\n\nMust use the Apple ID credential\n![ipatool-cli](@assets/images/2024-10-15-15-32-00.png)\n\n``` shell\n$ ipatool auth\n$ ipatool search Spotify\n$ ipatool download -b com.spotify.client -o spotify.ipa\n```\n## if you need extract IPA from jailbroken device \n\nThe traditional method to extract decrypted IPA files from a jailbroken iOS device involves using frida-ios-dump. This tool relies on Frida to dump and decrypt apps directly from the device.\n\n> https://github.com/AloneMonkey/frida-ios-dump\n\nBut I encountered many issues when dealing with this tool, hence I switch to Bagbak\n\n> https://github.com/ChiChou/bagbak\n\n``` shell\nnpm install -g bagbak\n```\n\nUse bagbak to decrypt the application and extract it from the iPhone. (Remmember to set SSH username to root, password is alpine)\n\n```shell\nexport SSH_USERNAME=root\n✦ ➜ bagbak com.apple.iBooks\n[info] pulling app bundle from device, please be patient\n[info] downloaded 682 files and 511 folders\n[info] app bundle downloaded\n....\nSaved to com.apple.iBooks-9.4.ipa\n```","src/content/blog/acquiring-ipa.md",[276],"@assets/images/2024-10-15-15-32-00.png","8a85f75b7558eab7",{"html":279,"metadata":280},"\u003Ch4 id=\"tldr\">TL;DR:\u003C/h4>\n\u003Cp>In a straightforward way, I’ll tell you a secret to obtaining IPA files the right way: “Ask your mobile developer”.\u003C/p>\n\u003Cp>\u003Cem>Joke, but true.\u003C/em>\u003C/p>\n\u003Cp>In mobile security audits, clients and developers usually hand over the IPA file directly. They might email it to you or provide access through development-focused distribution channels like TestFlight or Visual Studio App Center.\u003C/p>\n\u003Cp>But if you’re working on your own side project and the app is only available on the App Store, you’ll need to explore alternative ways to acquire the IPA:\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Ca href=\"https://github.com/majd/ipatool\">https://github.com/majd/ipatool\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Ch3 id=\"installation\">Installation:\u003C/h3>\n\u003Cp>Via Homebrew\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">$\u003C/span>\u003Cspan style=\"color:#98C379\"> brew\u003C/span>\u003Cspan style=\"color:#98C379\"> tap\u003C/span>\u003Cspan style=\"color:#98C379\"> majd/repo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">$\u003C/span>\u003Cspan style=\"color:#98C379\"> brew\u003C/span>\u003Cspan style=\"color:#98C379\"> install\u003C/span>\u003Cspan style=\"color:#98C379\"> ipatool\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"usage\">Usage:\u003C/h3>\n\u003Cp>Must use the Apple ID credential\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-15-32-00.png&#x22;,&#x22;alt&#x22;:&#x22;ipatool-cli&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">$\u003C/span>\u003Cspan style=\"color:#98C379\"> ipatool\u003C/span>\u003Cspan style=\"color:#98C379\"> auth\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">$\u003C/span>\u003Cspan style=\"color:#98C379\"> ipatool\u003C/span>\u003Cspan style=\"color:#98C379\"> search\u003C/span>\u003Cspan style=\"color:#98C379\"> Spotify\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">$\u003C/span>\u003Cspan style=\"color:#98C379\"> ipatool\u003C/span>\u003Cspan style=\"color:#98C379\"> download\u003C/span>\u003Cspan style=\"color:#D19A66\"> -b\u003C/span>\u003Cspan style=\"color:#98C379\"> com.spotify.client\u003C/span>\u003Cspan style=\"color:#D19A66\"> -o\u003C/span>\u003Cspan style=\"color:#98C379\"> spotify.ipa\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"if-you-need-extract-ipa-from-jailbroken-device\">if you need extract IPA from jailbroken device\u003C/h2>\n\u003Cp>The traditional method to extract decrypted IPA files from a jailbroken iOS device involves using frida-ios-dump. This tool relies on Frida to dump and decrypt apps directly from the device.\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Ca href=\"https://github.com/AloneMonkey/frida-ios-dump\">https://github.com/AloneMonkey/frida-ios-dump\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>But I encountered many issues when dealing with this tool, hence I switch to Bagbak\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Ca href=\"https://github.com/ChiChou/bagbak\">https://github.com/ChiChou/bagbak\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">npm\u003C/span>\u003Cspan style=\"color:#98C379\"> install\u003C/span>\u003Cspan style=\"color:#D19A66\"> -g\u003C/span>\u003Cspan style=\"color:#98C379\"> bagbak\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Use bagbak to decrypt the application and extract it from the iPhone. (Remmember to set SSH username to root, password is alpine)\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">export\u003C/span>\u003Cspan style=\"color:#E06C75\"> SSH_USERNAME\u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\">root\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">✦\u003C/span>\u003Cspan style=\"color:#98C379\"> ➜\u003C/span>\u003Cspan style=\"color:#98C379\"> bagbak\u003C/span>\u003Cspan style=\"color:#98C379\"> com.apple.iBooks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">[info] pulling app bundle from device, please be patient\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">[info] downloaded 682 files and 511 folders\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">[info] app bundle downloaded\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#56B6C2\">....\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">Saved\u003C/span>\u003Cspan style=\"color:#98C379\"> to\u003C/span>\u003Cspan style=\"color:#98C379\"> com.apple.iBooks-9.4.ipa\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":281,"localImagePaths":294,"remoteImagePaths":295,"frontmatter":296,"imagePaths":299},[282,285,288,291],{"depth":190,"slug":283,"text":284},"tldr","TL;DR:",{"depth":42,"slug":286,"text":287},"installation","Installation:",{"depth":42,"slug":289,"text":290},"usage","Usage:",{"depth":38,"slug":292,"text":293},"if-you-need-extract-ipa-from-jailbroken-device","if you need extract IPA from jailbroken device",[276],[],{"title":269,"author":14,"pubDatetime":297,"featured":17,"draft":17,"tags":298,"description":272},["Date","2024-05-02T00:00:00.000Z"],[19,20,271,22],[276],"acquiring-ipa.md","ios-jailbreak-guide",{"id":301,"data":303,"body":308,"filePath":309,"assetImports":310,"digest":318,"rendered":319,"legacyId":342},{"author":14,"pubDatetime":304,"title":305,"featured":17,"draft":17,"tags":306,"description":307},["Date","2024-05-02T00:00:00.000Z"],"Hello iOS. Can I \"root\" an iPhone?",[19,20,21,22],"Switching from Android to iOS, goodbye root, any challenges and restrictions? How to break them.","Recently, just came back to conduct a security testing for our internal mobile apps at work. I needed to set up a testing environment, buy new devices, root them all, and do more. This is a quick wrap-up of what I did. Also, I’m biased toward the iFan, so I’m not sure if we’ll have a Android root series. I can’t promise.\n\nSo here we are, a guide to jailbreaking an iPhone. If you're new to the term jailbreaking, take a few seconds to check out my [other post](/posts/ios-jailbreak-type). \n\n## Pre-jailbreak\n\nBefore we get started, let’s check what I have: an iPhone X running iOS 16.7.2. I chose this device because it strikes a balance, new enough to test modern apps but not too new to tackle the difficulties of jailbreaking. Then, select the appropriate method for jailbreaking at [ios.cfw.guide.](https://ios.cfw.guide/get-started)\n\n## Jailbreak with [Palera1n](https://palera.in/)\n```console\n- palera1n\n- MacOS\n- iPhone X, version 16.7.2\n- Must use USB-A to lighting cable due to compatibility issues when entering DFU mode. \n```\n\nStep 1. Remove Passcode in iPhone. Connect iPhone to Mac with a cable, then Click \u003Cspan class=\"accent\">“Trust”\u003C/span> this computer.\n\nStep 2: Install palera1n tool\n\n```bash\nsudo /bin/sh -c \"$(curl -fsSL https://static.palera.in/scripts/install.sh)\"\n```\nStep 3: Run palera1n on command line\n![palera1n-cli-1](@assets/images/2024-10-15-15-07-59.png)\n\nStep 4: Enter and follow the instruction\n![palera1n-cli-2](@assets/images/2024-10-15-15-08-18.png)\n\nAfter complete, this will install \u003Cspan class=\"accent\">paler1n\u003C/span> and \u003Cspan class=\"accent\">sileo\u003C/span> app on the device.\n![palera1n-result](@assets/images/2024-10-15-15-26-22.png)\n\n## Troubleshooting\nThe first issue I encountered was that SSH to iPhone on port 22 didn’t work due to changes in Palera1n, so I had to use an alternative method.\n(src: Q&A on palera1n.in)\n> password: root/mobile is alpine\n> > \n> ssh root@127.0.0.1 -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\" -o \"ProxyCommand=inetcat 44\"\n\nIf cannot use `sudo` , edit file `ssh_config`\n\n```shell\nfind / -name sshd_config -print\nuse vim \u003Csshconffig>\nPasswordAuthentication yes\n\n--------------------\nthen with sudo\nfind / -name sudo -print\n\nCreate a profile in ./\nvim .profile\nexport PATH=\"/private/preboot/[digit_string]/jb-xxxxxx/procursus/usr/bin:$PATH\"\nsource .profile\n```\n---\n\n## Revised version of the old method: [Checkra1n](https://checkra.in/)\n\n```console\n- Checkra1n: 0.12.3 version\n- MacOS\n- iPhone X, version 14.8.1\n- USB-A cable\n```\nStep 1. Remove Passcode in iPhone. Connect iPhone to Mac with a cable, then Click \u003Cspan class=\"accent\">“Trust”\u003C/span> this computer.\n\nStep 2. Install Checkra1n tools on your Mac. In version 0.12.3, refer to the notes.\n> A11 devices on iOS 14.0 and above require removing the passcode and enabling “Skip A11 BPR check” in the options. This is not recommended, but it’s there.\n  \nStep 3. Open Checkra1n tool, then config with option\n![checkra1n-config](@assets/images/2024-10-15-14-45-56.png)\n\n![checkra1n-config-2](@assets/images/2024-10-15-14-46-36.png)\n\nStep 4. Enter the DFU mode, then follow instruction on screen\n\n![dfu-mode](@assets/images/2024-10-15-14-47-07.png)\n\n\nStep 5. Once booted, will have the installed Checkra1n application on iPhone. This means we jailbreak successfully. Finally, we can install Cydia inside Checkra1n app.\n\n![cydia-loader](@assets/images/2024-10-15-14-47-20.png)\n\n## References:\n- https://canijailbreak.com/\n- https://www.theiphonewiki.com/\n- https://www.reddit.com/r/jailbreak/\n- https://ios.cfw.guide/","src/content/blog/ios-jailbreak-guide.md",[311,312,313,314,315,316,317],"@assets/images/2024-10-15-15-07-59.png","@assets/images/2024-10-15-15-08-18.png","@assets/images/2024-10-15-15-26-22.png","@assets/images/2024-10-15-14-45-56.png","@assets/images/2024-10-15-14-46-36.png","@assets/images/2024-10-15-14-47-07.png","@assets/images/2024-10-15-14-47-20.png","5c1c74fddc215613",{"html":320,"metadata":321},"\u003Cp>Recently, just came back to conduct a security testing for our internal mobile apps at work. I needed to set up a testing environment, buy new devices, root them all, and do more. This is a quick wrap-up of what I did. Also, I’m biased toward the iFan, so I’m not sure if we’ll have a Android root series. I can’t promise.\u003C/p>\n\u003Cp>So here we are, a guide to jailbreaking an iPhone. If you’re new to the term jailbreaking, take a few seconds to check out my \u003Ca href=\"/posts/ios-jailbreak-type\">other post\u003C/a>.\u003C/p>\n\u003Ch2 id=\"pre-jailbreak\">Pre-jailbreak\u003C/h2>\n\u003Cp>Before we get started, let’s check what I have: an iPhone X running iOS 16.7.2. I chose this device because it strikes a balance, new enough to test modern apps but not too new to tackle the difficulties of jailbreaking. Then, select the appropriate method for jailbreaking at \u003Ca href=\"https://ios.cfw.guide/get-started\">ios.cfw.guide.\u003C/a>\u003C/p>\n\u003Ch2 id=\"jailbreak-with-palera1n\">Jailbreak with \u003Ca href=\"https://palera.in/\">Palera1n\u003C/a>\u003C/h2>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"console\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- palera1n\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- MacOS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- iPhone X, version 16.7.2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- Must use USB-A to lighting cable due to compatibility issues when entering DFU mode. \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Step 1. Remove Passcode in iPhone. Connect iPhone to Mac with a cable, then Click \u003Cspan class=\"accent\">“Trust”\u003C/span> this computer.\u003C/p>\n\u003Cp>Step 2: Install palera1n tool\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">sudo\u003C/span>\u003Cspan style=\"color:#98C379\"> /bin/sh\u003C/span>\u003Cspan style=\"color:#D19A66\"> -c\u003C/span>\u003Cspan style=\"color:#98C379\"> \"$(\u003C/span>\u003Cspan style=\"color:#61AFEF\">curl\u003C/span>\u003Cspan style=\"color:#D19A66\"> -fsSL\u003C/span>\u003Cspan style=\"color:#98C379\"> https://static.palera.in/scripts/install.sh)\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Step 3: Run palera1n on command line\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-15-07-59.png&#x22;,&#x22;alt&#x22;:&#x22;palera1n-cli-1&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Step 4: Enter and follow the instruction\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-15-08-18.png&#x22;,&#x22;alt&#x22;:&#x22;palera1n-cli-2&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>After complete, this will install \u003Cspan class=\"accent\">paler1n\u003C/span> and \u003Cspan class=\"accent\">sileo\u003C/span> app on the device.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-15-26-22.png&#x22;,&#x22;alt&#x22;:&#x22;palera1n-result&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"troubleshooting\">Troubleshooting\u003C/h2>\n\u003Cp>The first issue I encountered was that SSH to iPhone on port 22 didn’t work due to changes in Palera1n, so I had to use an alternative method.\n(src: Q&#x26;A on palera1n.in)\u003C/p>\n\u003Cblockquote>\n\u003Cp>password: root/mobile is alpine\u003C/p>\n\u003Cblockquote>\n\u003C/blockquote>\n\u003Cp>ssh root@127.0.0.1 -o “StrictHostKeyChecking=no” -o “UserKnownHostsFile=/dev/null” -o “ProxyCommand=inetcat 44”\u003C/p>\n\u003C/blockquote>\n\u003Cp>If cannot use \u003Ccode>sudo\u003C/code> , edit file \u003Ccode>ssh_config\u003C/code>\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">find\u003C/span>\u003Cspan style=\"color:#98C379\"> /\u003C/span>\u003Cspan style=\"color:#D19A66\"> -name\u003C/span>\u003Cspan style=\"color:#98C379\"> sshd_config\u003C/span>\u003Cspan style=\"color:#D19A66\"> -print\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">use\u003C/span>\u003Cspan style=\"color:#98C379\"> vim\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#98C379\">sshconffi\u003C/span>\u003Cspan style=\"color:#ABB2BF\">g>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">PasswordAuthentication\u003C/span>\u003Cspan style=\"color:#98C379\"> yes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">--------------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">then\u003C/span>\u003Cspan style=\"color:#61AFEF\"> with\u003C/span>\u003Cspan style=\"color:#98C379\"> sudo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">find\u003C/span>\u003Cspan style=\"color:#98C379\"> /\u003C/span>\u003Cspan style=\"color:#D19A66\"> -name\u003C/span>\u003Cspan style=\"color:#98C379\"> sudo\u003C/span>\u003Cspan style=\"color:#D19A66\"> -print\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">Create\u003C/span>\u003Cspan style=\"color:#98C379\"> a\u003C/span>\u003Cspan style=\"color:#98C379\"> profile\u003C/span>\u003Cspan style=\"color:#98C379\"> in\u003C/span>\u003Cspan style=\"color:#98C379\"> ./\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">vim\u003C/span>\u003Cspan style=\"color:#98C379\"> .profile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">export\u003C/span>\u003Cspan style=\"color:#E06C75\"> PATH\u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#98C379\">\"/private/preboot/[digit_string]/jb-xxxxxx/procursus/usr/bin:\u003C/span>\u003Cspan style=\"color:#E06C75\">$PATH\u003C/span>\u003Cspan style=\"color:#98C379\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#56B6C2\">source\u003C/span>\u003Cspan style=\"color:#98C379\"> .profile\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"revised-version-of-the-old-method-checkra1n\">Revised version of the old method: \u003Ca href=\"https://checkra.in/\">Checkra1n\u003C/a>\u003C/h2>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"console\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- Checkra1n: 0.12.3 version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- MacOS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- iPhone X, version 14.8.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">- USB-A cable\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Step 1. Remove Passcode in iPhone. Connect iPhone to Mac with a cable, then Click \u003Cspan class=\"accent\">“Trust”\u003C/span> this computer.\u003C/p>\n\u003Cp>Step 2. Install Checkra1n tools on your Mac. In version 0.12.3, refer to the notes.\u003C/p>\n\u003Cblockquote>\n\u003Cp>A11 devices on iOS 14.0 and above require removing the passcode and enabling “Skip A11 BPR check” in the options. This is not recommended, but it’s there.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Step 3. Open Checkra1n tool, then config with option\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-14-45-56.png&#x22;,&#x22;alt&#x22;:&#x22;checkra1n-config&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-14-46-36.png&#x22;,&#x22;alt&#x22;:&#x22;checkra1n-config-2&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Step 4. Enter the DFU mode, then follow instruction on screen\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-14-47-07.png&#x22;,&#x22;alt&#x22;:&#x22;dfu-mode&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Step 5. Once booted, will have the installed Checkra1n application on iPhone. This means we jailbreak successfully. Finally, we can install Cydia inside Checkra1n app.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@assets/images/2024-10-15-14-47-20.png&#x22;,&#x22;alt&#x22;:&#x22;cydia-loader&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"references\">References:\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://canijailbreak.com/\">https://canijailbreak.com/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.theiphonewiki.com/\">https://www.theiphonewiki.com/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.reddit.com/r/jailbreak/\">https://www.reddit.com/r/jailbreak/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://ios.cfw.guide/\">https://ios.cfw.guide/\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":322,"localImagePaths":336,"remoteImagePaths":337,"frontmatter":338,"imagePaths":341},[323,326,329,332,335],{"depth":38,"slug":324,"text":325},"pre-jailbreak","Pre-jailbreak",{"depth":38,"slug":327,"text":328},"jailbreak-with-palera1n","Jailbreak with Palera1n",{"depth":38,"slug":330,"text":331},"troubleshooting","Troubleshooting",{"depth":38,"slug":333,"text":334},"revised-version-of-the-old-method-checkra1n","Revised version of the old method: Checkra1n",{"depth":38,"slug":70,"text":71},[311,312,313,314,315,316,317],[],{"title":305,"author":14,"pubDatetime":339,"featured":17,"draft":17,"tags":340,"description":307},["Date","2024-05-02T00:00:00.000Z"],[19,20,21,22],[311,312,313,314,315,316,317],"ios-jailbreak-guide.md"]